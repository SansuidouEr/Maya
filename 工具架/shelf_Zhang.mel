global proc shelf_Zhang () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 0
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "快速导出剪切板文件" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "export" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "导出" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//This is a paid script pack and is not free to use. Please purchase a copy and download the script pack here https://gumroad.com/malcolm341\n\n//Thanks very much for your support! Each purchase helps maintain the ad free Youtube channel found here https://www.youtube.com/malcolm341\n\n//Export Temp .ma v1.1\n\nstring $maCurrentMayaVersionMac = `about -mac`;\nif( $maCurrentMayaVersionMac == 1)\n{\n    sysFile -makeDir \"/Users/Shared/matemp\";\n    string $maCurrentMayaVersion = `about -product`;\n\tif(`gmatch $maCurrentMayaVersion \"*LT*\"`)\n    {\n        file -force -options \"v=0;\" -typ \"mayaLT\" -pr -es \"/Users/Shared/matemp/temp.mlt\";\n        print \"Exported selection to temp file Users\\\\Shared\\\\matemp\\\\temp.mlt\";\n\t}\n\t\t\n\telse\n\t{\n\t\tfile -force -options \"v=0;\" -typ \"mayaAscii\" -pr -es \"/Users/Shared/matemp/temp.ma\";\n        print \"Exported selection to temp file Users\\\\Shared\\\\matemp\\\\temp.ma\";\n\t}\n}\n\nelse\n{\n    sysFile -makeDir \"C:/matemp\";\n    string $maCurrentMayaVersion = `about -product`;\n\tif(`gmatch $maCurrentMayaVersion \"*LT*\"`)\n    {\n        file -force -options \"v=0;\" -typ \"mayaLT\" -pr -es \"C:/matemp/temp.mlt\";\n        print \"Exported selection to temp file c:\\\\matemp\\\\temp.mlt\";\n\t}\n\t\t\n\telse\n\t{\n\t\tfile -force -options \"v=0;\" -typ \"mayaAscii\" -pr -es \"C:/matemp/temp.ma\";\n        print \"Exported selection to temp file c:\\\\matemp\\\\temp.ma\";\n\t}\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
        -mi "快速导出OBJ文件" ( "//This is a paid script pack and is not free to use. Please purchase a copy and download the script pack here https://gumroad.com/malcolm341\n\n//Thanks very much for your support! Each purchase helps maintain the ad free Youtube channel found here https://www.youtube.com/malcolm341\n\n//Export Temp .obj v1.1\n\n{\n\t//Load .obj plugin\n\tint $loadedPlugInsObj = `pluginInfo -q -loaded \"objExport.mll\"`;\n\tif ($loadedPlugInsObj == 0)\n    {\n       \tloadPlugin \"objExport.mll\";\n\t\tpluginInfo -edit -autoload true \"objExport.mll\";\n\t}\n\t\n\t//Export to .obj MAC location\n\tstring $maCurrentMayaVersionMac = `about -mac`;\n\tif( $maCurrentMayaVersionMac == 1)\n\t{\n    \tsysFile -makeDir \"/Users/Shared/matemp\";\n\t\tfile -force -options \"groups=0;ptgroups=0;materials=0;smoothing=1;normals=1\" -typ \"OBJexport\" -pr -es \"/Users/Shared/matemp/temp.obj\";\n    \tprint \"Exported selection to temp file Users\\\\Shared\\\\matemp\\\\temp.obj\";\n\t}\n\n\t//Export to .obj PC location\n\telse\n\t{\n    \tsysFile -makeDir \"C:/matemp\";\n\t\tfile -force -options \"groups=0;ptgroups=0;materials=0;smoothing=1;normals=1\" -typ \"OBJexport\" -pr -es \"C:/matemp/temp.obj\";\n\n\t\tprint \"Exported selection to temp file c:\\\\matemp\\\\temp.obj\";\n\t}\n}" )
        -mi "快速打开导出目录" ( "//This is a paid script pack and is not free to use. Please purchase a copy and download the script pack here https://gumroad.com/malcolm341\n\n//Thanks very much for your support! Each purchase helps maintain the ad free Youtube channel found here https://www.youtube.com/malcolm341\n\n//Find Temp Folder v1.0\n\n{\n\tstring $maCurrentMayaVersionMac = `about -mac`;\n\tif($maCurrentMayaVersionMac == 1)\n\t{\n\t\tsysFile -makeDir \"/Users/Shared/matemp\";\n\t\tlaunch -directory \"/Users/Shared/matemp\";\n \t}\t\n\telse\n\t{\n\t\tsysFile -makeDir \"C:/matemp\";\n\t\tlaunch -directory \"C:/matemp\";\n\t}\t\n}" )
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"快速导出/导出选定网格到缓存目录，默认为.ma格式，可通过右键选项导出为.Obj格式\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "快速导入剪切板文件" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "导入" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//Import Temp .ma v1.1\n\nstring $maCurrentMayaVersionMac = `about -mac`;\nif( $maCurrentMayaVersionMac == 1)\n{    \n    string $maCurrentMayaVersion = `about -product`;\n\tif(`gmatch $maCurrentMayaVersion \"*LT*\"`)\n    {\n        file -import \"/Users/Shared/matemp/temp.mlt\";\n        print \"Imported temp.mlt into current scene\";\n\t}\n\t\t\n\telse\n\t{\n        file -import \"/Users/Shared/matemp/temp.ma\";\n        print \"Imported temp.ma into current scene\";\n\t}\n}\n\nelse\n{\n    string $maCurrentMayaVersion = `about -product`;\n\tif(`gmatch $maCurrentMayaVersion \"*LT*\"`)\n    {\n        file -import \"C:/matemp/temp.mlt\";\n        print \"Imported temp.mlt into current scene\";\n\t}\n\t\t\n\telse\n\t{\n        file -import \"C:/matemp/temp.ma\";\n        print \"Imported temp.ma into current scene\";\n\t}\n} " 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "快速导入OBJ文件" ( "//Import Temp .obj v1.0\n\n{\n\t//Load .obj plugin\n\tint $loadedPlugInsObj = `pluginInfo -q -loaded \"objExport.mll\"`;\n\tif ($loadedPlugInsObj == 0)\n    {\n       \tloadPlugin \"objExport.mll\";\n\t\tpluginInfo -edit -autoload true \"objExport.mll\";\n\t}\n\t\n\t//Import to .obj MAC location\n\tstring $maCurrentMayaVersionMac = `about -mac`;\n\tif( $maCurrentMayaVersionMac == 1)\n\t{\n        file -import \"/Users/Shared/matemp/temp.obj\";\n        print \"Imported temp.obj into current scene\";\n\t}\n\n\t//Import to .obj PC location\n\telse\n\t{\n        file -import \"C:/matemp/temp.obj\";\n        print \"Imported temp.obj into current scene\";\n\t}\n}" )
        -mi "快速打开导入目录" ( "//Find Temp Folder v1.0\n\n{\n\tstring $maCurrentMayaVersionMac = `about -mac`;\n\tif($maCurrentMayaVersionMac == 1)\n\t{\n\t\tsysFile -makeDir \"/Users/Shared/matemp\";\n\t\tlaunch -directory \"/Users/Shared/matemp\";\n \t}\t\n\telse\n\t{\n\t\tsysFile -makeDir \"C:/matemp\";\n\t\tlaunch -directory \"C:/matemp\";\n\t}\t\n}" )
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"快速导出/导出选定网格到缓存目录，默认为.ma格式，可通过右键选项导出为.Obj格式\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "保存所有首选项" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Save all preferences\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "UVTkSaveValue.png" 
        -image1 "UVTkSaveValue.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//保存所有首选项v1.2\n{\n\t//Check if script editor already open\n\tglobal int $m341_scriptEditorOpen;\n\t$m341_scriptEditorOpen = 0;\n\tif (`window -exists scriptEditorPanel1Window`)\n\t{\n\t\tglobal int $m341_scriptEditorOpen;\n\t\t$m341_scriptEditorOpen = 1;\n\t}\n\n\t//Save current work space so it loads next time Maya starts\n\tworkspaceLayoutManager -save;\t\n\t\n\t//Open script editor to prevent losing script tabs\n\tScriptEditor;\n\n\t//Save script editor tabs to temp folder\n\tsyncExecuterBackupFiles();\n\n\t//Save all preferences\n\tSavePreferences;\n\n\t//Save all shelves\n\tglobal string $gShelfTopLevel;\n\tsaveAllShelves $gShelfTopLevel;\n\n\t//Save MTK shelf\n\tdRSaveShelves;\n\n\t//Save tool settings\n\tsaveToolSettings;\n\tsaveViewportSettings;\n\n\t//Save content browser settings\n\tsaveContentBrowserSettings;\n\n\t//Save plug-in prefs\n\tpluginInfo -savePluginPrefs;\n\n\t//Save menuset prefs\n\tmenuSetPref -saveAll;\n\n\t//Close script editor if it wasn't open to start\n\tif ($m341_scriptEditorOpen == 0)\n\t{\n\t\tdeleteUI scriptEditorPanel1Window;\t\n\t}\n\n\t//Save Window prefs\n\twindowPref -saveMainWindowState startupMainWindowState;\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_保存首选项工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"可保存所有首选项。\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "快速退出并保存首选项" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Close_Maya" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "SP_MessageBoxCritical.png" 
        -image1 "SP_MessageBoxCritical.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "global proc m341_killMayaFast()\n{\n\t//Save current work space so it loads next time Maya starts\n\tworkspaceLayoutManager -save;\t\n\n\t//Open script editor to prevent losing script tabs\n\tScriptEditor;\n\n\t//Save script editor tabs to temp folder\n\tsyncExecuterBackupFiles();\n\n\t//Save all preferences\n\tSavePreferences;\n\n\t//Save all shelves\n\tglobal string $gShelfTopLevel;\n\tsaveAllShelves $gShelfTopLevel;\n\n\t//Save MTK shelf\n\tdRSaveShelves;\n\n\t//Save tool settings\n\tsaveToolSettings;\n\tsaveViewportSettings;\n\n\t//Save content browser settings\n\tsaveContentBrowserSettings;\n\n\t//Save plug-in prefs\n\tpluginInfo -savePluginPrefs;\n\n\t//Save menuset prefs\n\tmenuSetPref -saveAll;\n\n\t//Close script editor\t\n\tdeleteUI scriptEditorPanel1Window;\n\t\n\t//Save current work space so it loads next time Maya starts\n\tworkspaceLayoutManager -save;\t\n\n\t//Save Window prefs\n\twindowPref -saveMainWindowState startupMainWindowState;\n\n\t//Save scene if changed\n\t//saveChanges(\"\");\n\t\n\t//Close Maya\n\t//system(\"taskkill /IM maya.exe /f /t\");\n\t\n\t//Query application ID and use that to kill only the currently focused Maya\n\t$mayaInstanceID = `getpid`;\n\t//If Mac\n\tstring $maCurrentMayaVersionMac = `about -mac`;\n\tif( $maCurrentMayaVersionMac == 1)\n\t{\n\t\tsystem(\"kill -9 \"  + $mayaInstanceID);\n\t}\n\n\telse\n\t{\n\t\tsystem(\"taskkill /PID \"  + $mayaInstanceID +\" /f /t\");\t\n\t}\n}\n\n//Check which version of Maya is running\nstring $findMayaYear2020 = `about -product`;\nstring $findMayaYear2019 = `about -product`;\nstring $findMayaYear2018 = `about -product`;\nstring $findMayaYear2017 = `about -product`;\nint $mayaYear2020 = `gmatch $findMayaYear2020 \"*2020*\"`;\nint $mayaYear2019 = `gmatch $findMayaYear2019 \"*2019*\"`;\nint $mayaYear2018 = `gmatch $findMayaYear2018 \"*2018*\"`;\nint $mayaYear2017 = `gmatch $findMayaYear2017 \"*2017*\"`;\n\n//Use fast close for older versions of Maya\nif ($mayaYear2020 == 1 || $mayaYear2019 == 1 || $mayaYear2018 == 1 || $mayaYear2017 == 1)\n{\n\t//Check if scene was modified\n\tint $checkFileDirty = `file -q -modified`;\n\tif ($checkFileDirty == 0)\n\t{\n\t\tm341_killMayaFast();\t\t\n\t}\n\n\telse if ($checkFileDirty == 1)\n\t{\n\t\t//If user cancels don't kill Maya\n\t\tif(!saveChanges(\"\"))\n\t\t{\n\t\t\tprint \"Canceled fast close\";\n\t\t}\n\t\n\t\telse\n\t\t{\n\t\t\tm341_killMayaFast();\n\t\t}\n\t}\n}\n\nelse\n{\n\t//Use regular close for newer versions of Maya\n\tQuit;\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_快速退出Maya工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"可快速退出Maya并保存全部首选项\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "选择循环线  可选择一侧的面" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Circle Line" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyConvertToEdgeLoop.png" 
        -image1 "polyConvertToEdgeLoop.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "global proc m341_selectHalfMesh()\n{\n\tstring $edges[] = `ls -sl -fl`;\n\tint $sizeEdges = `size $edges`;\n\t\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\tstring $mesh[] = `ls -sl`;\n\t\n\t//Store current UV set name\n\tstring $uvSet[] = `polyUVSet -q -currentUVSet`;\n\t\n\t\n\tpolyCopyUV -uvSetNameInput \"map1\" -uvSetName \"m341_tempUVsDelete\" -createNewMap 1 -ch 1;\n\tConvertSelectionToFaces;\n\tpolyProjection -ch 1 -type Planar -ibd on -kir  -md z;\n\n\t//Cut UV edges\n\tselect $edges;\n\tpolyMapCut -ch 1;\n\n\t//Get faces\n\tConvertSelectionToUVs;\n\tInvertSelection;\n\tstring $UVs[] = `ls -sl -fl`;\n\tselect $UVs[0]; \n\tConvertSelectionToUVShell;\n\tConvertSelectionToFaces;\n\tstring $faces[] = `ls -sl`;\n\n\t//Clean up temp UV set\n\tDeleteCurrentUVSet;\n\t//Switch back to previous UV set from above\n\tpolyUVSet -currentUVSet -uvSet $uvSet[0];\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\tDeleteHistory;\n\n\t//Select half\n\tselect $faces;\n\tselect -add $mesh;\n\tSelectMultiComponentMask;\n}\nm341_selectHalfMesh();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n\tglobal string $m341_close_HelpWindow;\n\n\tif (`window -exists $m341_close_HelpWindow`)\n\t{\n\t\tglobal string $m341_close_HelpWindow;\n\t\tdeleteUI $m341_close_HelpWindow;\n\t}\n\t\n\t$m341_close_HelpWindow = `window -title \"三岁豆Er_选择面工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n\t\t\n\tpaneLayout -configuration \"horizontal2\";\n\tscrollField -text \"特殊的“保存首选项”工具，用于保存脚本编辑器、MTK自定义工具架、最近的文件历史记录、工具设置以及Maya默认的“保存首选项”命令中未包含的其他首选项的内容。\\nBy - 三岁豆\"\n\t-wordWrap true\n\t-enableBackground true\n\t-backgroundColor 0.23 0.23 0.23;\n\t\n\tshowWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "X射线显示" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "X ray\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Xray" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "menuIconConnect.png" 
        -image1 "menuIconConnect.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//X射线选定对象v1.0\n\nglobal proc m341_XRaySelected()\n{\n\tstring $xrayObjs[] = `ls -sl`;\n\tint $sizeXrayObjs = `size $xrayObjs`;\n\tif ($sizeXrayObjs == 0)\n\t{\n\t\tstring $allMeshes[] = `ls -exactType mesh`;\n\t\tstring $allNurbs[] = `ls -exactType nurbsSurface`;\n\t\tselect $allMeshes;\n\t\tselect -add $allNurbs;\n\n\t\tglobal int $m341_xRayToggle;\n\t\t$m341_xRayToggle = !$m341_xRayToggle;\n\t    if ($m341_xRayToggle == 1)\n\t\t{\n\t\t\tdisplaySurface -xRay 1;\n\t\t\tselect -clear;\n\t\t\tprint \"All objects XRay on\";\t\t\t\n    \t}\n\n\t    else if ($m341_xRayToggle == 0)\n    \t{\n\t\t\tdisplaySurface -xRay 0;\n\t\t\tselect -clear;\n\t\t\tprint \"All objects XRay off\";\t\t\t\n\t    }\n\t}\n\telse\n\t{\n\t\tfor ($item in $xrayObjs)\n\t\t{\n\t\t\tselect $item;\n\t\t\tint $queryXRay[] = `displaySurface -q -xRay`;\n\t\t\tif ($queryXRay[0] == 0)\n\t\t\t{\n\t\t\t\tdisplaySurface -xRay 1;\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplaySurface -xRay 0;\t\t\n\t\t\t}\n\t\t}\n\t\tselect $xrayObjs;\n\t\tprint \"Selected objects XRay on/off\";\t\t\n\t}\n}\nm341_XRaySelected();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_Xray工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"X射线选择一个或多个对象，然后单击“工具架”按钮以打开/关闭选定的X射线。如果未选择任何对象，则X射线模式将打开/关闭场景中的所有对象。这对于将场景重置回正常状态非常有用。\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "删除空组" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "DeleteGroup\n\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "deleteActive.png" 
        -image1 "deleteActive.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//删除空组 v1.2\n\n{\n\t//Delete history to prevent messing up materials assignments\n\tBakeAllNonDefHistory;\n\t\n\t//Delete empty groups and sets Maya way\n\tsource cleanUpScene;\n\tdeleteEmptyGroups;\n\tdeleteUnusedSets;\n\n\t{\n\t\t//Select all meshes without vertices and delete them\n\t\tstring $allXforms[] = `ls -exactType mesh`;\n\t\tselect $allXforms;\n\t\t\n\t\t//Deselect all deformer shapes with a hack because they're all named orig\n\t\tfor ($itemXF in $allXforms)\n\t\t{\n\t\t\tif (`gmatch $itemXF \"*Orig\"`)\n\t\t\t{\n\t\t\t\tselect -deselect \"*Orig\";\n\t\t\t}\n\t\t}\n\t\t$allXforms = `ls -sl`;\n\n\t\t//Set up loop\n\t\tstring $Objs[] = `ls -sl`;\n\t\tint $ObjsSize = `size $Objs`;\n\t\tint\t$Counter = 0;\n\n\t\tfor ($ItemDEG1 = 0; $ItemDEG1 < $ObjsSize; ++$ItemDEG1)\n\t\t{\n\t\t\t//Select first item\n\t\t\tselect $Objs[$Counter];\n\t\t\t//If child has no verts delete it\n\t\t\tConvertSelectionToVertices;\n\t\t\tstring $checkIfVerts[] = `filterExpand -sm 31`;\n\t\t\tint $checkIfVertsSize = `size $checkIfVerts`;\n\t\t\tif ($checkIfVertsSize == 0)\n\t\t\t{\n\t\t\t\t\tdelete;\n\t\t\t}\t\n\t\t\t$Counter = $Counter + 1;\n\t\t}\n\t\t//Delete empty groups Maya way\n\t\tsource cleanUpScene;\n\t\tdeleteEmptyGroups;\n\t}\n\n\t{\n\t\t//Select all transforms without children and delete them\n\t\tSelectAllCameras;\n\t\tstring $allCamera[] = `ls -sl`;\n\t\tstring $allXforms[] = `ls -exactType transform`;\n\t\tselect $allXforms;\n\t\tselect -deselect $allCamera;\n\n\t\t//Set up loop\n\t\tstring $Objs[] = `ls -sl`;\n\t\tint $ObjsSize = `size $Objs`;\n\t\tint\t$Counter = 0;\n\n\t\tfor ($ItemDEG2 = 0; $ItemDEG2 < $ObjsSize; ++$ItemDEG2)\n\t\t{\n\t\t\t//Select first item\n\t\t\tselect $Objs[$Counter];\n\t\t\t//Query if child exists\n\t\t\tstring $checkForChildren[] = `listRelatives`;\n\t\t\tint $checkForChildrenSize = `size $checkForChildren`;\n\t\t\tif ($checkForChildrenSize == 0)\n\t\t\t{\n\t\t\t\t//If no child delete it\n\t\t\t\tdelete;\n\t\t\t}\n\t\t\t$Counter = $Counter + 1;\n\t\t}\n\t\t//Delete empty groups Maya way\n\t\tsource cleanUpScene;\n\t\tdeleteEmptyGroups;\n\t}\n\tSelectNone;\n\tprint \"Empty groups deleted\";\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_删除空组工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"删除大纲视图中的空组\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "在物体上创建组件" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyAssignSubdivHole.png" 
        -image1 "polyAssignSubdivHole.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "global string $m341_cPASVersion;\n$m341_cPASVersion = \"\";\nglobal proc m341_cPAS_help()\n{\n\tglobal string $m341_cPAS_helpWindow;\n\n\tif (`window -exists $m341_cPAS_helpWindow`)\n\t{\n\t\tglobal string $m341_cPAS_helpWindow;\n\t\tdeleteUI $m341_cPAS_helpWindow;\n\t}\n\t\n\t$m341_cPAS_helpWindow = `window -title \"帮助\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable false -resizeToFitChildren false -width 300 -height 100`;\n\t\t\n\tpaneLayout -configuration \"horizontal2\";\n    scrollField -text \"选择点 线 面  单击对应命令，即可以选中位置为中心创建对应物体。\\nBy - 三岁豆\"\n\t-wordWrap true\n\t-enableBackground true\n\t\n\tshowWindow $m341_cPAS_helpWindow;\n}\n\n//*******************************************************************************************************\n//Change cPAS Scale Value\nglobal proc m341_cPAS_Scale_ValueChanged()\n{\n\t//Query the value from the float field and store it in a variable\n\tglobal float $m341_cPAS_Scale_userInput;\n\t$m341_cPAS_Scale_userInput = `floatField -query -value cPAS_Scale_FloatFieldName`;\n\toptionVar -floatValue \"m341_cPAS_ScaleFloatField_VarName\" $m341_cPAS_Scale_userInput;\n\t//Print value\n\tprint(\"cPAS Scale set to \" + $m341_cPAS_Scale_userInput + \"\\n\");\n}\n\n//*******************************************************************************************************\n//Primitive Type Cube\nproc cPAS_Cube()\n{\n\tpolyCube -w 1 -h 1 -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;   \n}\n\n//*******************************************************************************************************\n//Primitive Type Plane\nproc cPAS_Plane()\n{\n\tpolyPlane -w 1 -h 1 -sx 1 -sy 1 -ax 0 1 0 -cuv 2 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Sphere\nproc cPAS_Sphere()\n{\n\tpolySphere -r 0.5 -sx 16 -sy 16 -ax 0 1 0 -cuv 2 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Cylinder\nproc cPAS_Cylinder()\n{\n\tpolyCylinder -r 0.5 -h 1 -sx 16 -sy 1 -sz 0 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Pipe\nproc cPAS_Pipe()\n{\n\tpolyPipe -r 0.5 -h 2 -t 0.25 -sa 16 -sh 1 -sc 0 -ax 0 1 0 -cuv 1 -rcp 0 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Helix\nproc cPAS_Helix()\n{\n\tpolyHelix -c 2 -h 1 -w 1 -r 0.1 -sa 16 -sco 16 -sc 0 -d 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Platonic\nproc cPAS_Platonic()\n{\n\tCreatePolygonPlatonic;\n\tstring $objName[] = `ls -sl`;\n\tstring $historyNode[] = `listHistory $objName`;\n\tsetAttr ($historyNode[1] + \".primitive\") 1;\n\tsetAttr ($historyNode[1] + \".subdivisions\") 2;\n\tsetAttr ($historyNode[1] + \".radius\") 0.5;\n\t\n\tselect $historyNode[1];\n\tselect -add $objName;\n}\n\n//*******************************************************************************************************\n//Primitive Type Torus\nproc cPAS_Torus()\n{\n\tpolyTorus -r 0.375 -sr 0.125 -tw 0 -sx 16 -sy 16 -ax 0 1 0 -cuv 1 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Cone\nproc cPAS_Cone()\n{\n\tpolyCone -r 0.5 -h 1 -sx 16 -sy 1 -sz 0 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;\n}\n\n//*******************************************************************************************************\n//Primitive Type Locator\nproc cPAS_Locator()\n{\n\tspaceLocator -p 0 0 0;\n}\n\n//*******************************************************************************************************\n//Primitive Type Locator\nproc cPAS_Group()\n{\n\tgroup -empty;\n}\n\n//***********************************************************************************************************************************************************\n//Cube\nglobal proc m341_cPAS_CreateCube()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"CUBE\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Cube();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cube();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cube();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Cube();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Plane\nglobal proc m341_cPAS_CreatePlane()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"PLANE\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Plane();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Plane();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Plane();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Plane();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Sphere\nglobal proc m341_cPAS_CreateSphere()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\t//$m341_cPAS_Scale_userInput = $m341_cPAS_Scale_userInput / 2;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"SPHERE\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Sphere();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Sphere();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Sphere();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Sphere();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Cylinder\nglobal proc m341_cPAS_CreateCylinder()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"CYLINDER\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Cylinder();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cylinder();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cylinder();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Cylinder();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Pipe\nglobal proc m341_cPAS_CreatePipe()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"PIPE\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Pipe();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Pipe();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Pipe();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Pipe();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Helix\nglobal proc m341_cPAS_CreateHelix()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"HELIX\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Helix();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Helix();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Helix();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Helix();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Platonic\nglobal proc m341_cPAS_CreatePlatonic()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"PLATONIC\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Platonic();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Platonic();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Platonic();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Platonic();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Torus\nglobal proc m341_cPAS_CreateTorus()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"TORUS\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Torus();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Torus();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Torus();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Torus();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Cone\nglobal proc m341_cPAS_CreateCone()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"CONE\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Cone();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cone();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Cone();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Cone();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n\n\n\n\n\n//***********************************************************************************************************************************************************\n//Locator\nglobal proc m341_cPAS_CreateLocator()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"LOCATOR\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Locator();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Locator();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Locator();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Locator();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Group\nglobal proc m341_cPAS_CreateGroup()\n{\n\tglobal float $m341_cPAS_Scale_userInput;\n\tm341_cPAS_Scale_ValueChanged();\n\t\n\t//Scale\n\tglobal float $m341_cPAS_Scale_userInput;\n\tfloat $primitiveScale = $m341_cPAS_Scale_userInput;\n\n\t//Name of object\n\tstring $primitiveName = \"GROUP\";\n\t\n\t//Rotate direction\n\tfloat $rotateX = 0;\n\tfloat $rotateY = 0;\n\tfloat $rotateZ = -90;\n\n\t//Reset pivot to fix errors below\n\tmanipPivot -rp;\n\t\n\n\t//Fix other unit measurements\n\tstring $mayaUnits = `currentUnit -q`;\n\tcurrentUnit -linear \"cm\";\t\n\n    //Check what component mode the user is in\n\tstring $curveSelected[] = `filterExpand -expand true -sm 9`;\n\tint $sizeCurveSelected = size($curveSelected);\n\n\tstring $nurbSelected[] = `filterExpand -expand true -sm 10`;\n\tint $sizeNurbSelected = size($nurbSelected);\n\t\n\tstring $cvsSelected[] = `filterExpand -expand true -sm 28`;\n\tint $sizeCVsSelected = size($cvsSelected);\n\t\n   \tstring $objectsSelected[] = `filterExpand -expand true -sm 12`;\n\tint $sizeObjectsSelected = size($objectsSelected);\n\t\n\tstring $locatorSelected[] = `filterExpand -expand true -sm 22`;\n\tint $sizeLocatorSelected = size($locatorSelected);\n\t\n\tstring $nothingSelected[] = `ls -sl`;\n\tint $sizeNothingSelected = size($nothingSelected);\n\t\n\tstring $facesSelected[] = `filterExpand -expand true -sm 34`;\n\tint $sizeFacesSelected = size($facesSelected);\n\n   \tstring $edgesSelected[] = `filterExpand -expand true -sm 32`;\n\tint $sizeEdgesSelected = size($edgesSelected);\n   \t\n\tstring $vertsSelected[] = `filterExpand -expand true -sm 31`;\n\tint $sizeVertsSelected = size($vertsSelected);\n   \t\n\n\tstring $component[] = `ls -sl`;\n\ttoggleSelMode;\n\ttoggleSelMode;\n\tselectMode -object;\n\t\n\tstring $object[] = `ls -sl`;\n\tselect $component;\n\n\t//Switch to move tool component mode\n\tMoveTool;\n\tmanipMoveContext -edit -mode 10 Move;\n\t\n\t//Get move tool location for object mode, locator and nothing mode\n\tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t\n\t//Get move tool angle and convert radius to degrees\n\tfloat $locatorTargetAngle[] = `manipMoveContext -q -orientAxes \"Move\"`;\n\t$locatorTargetAngle[0] = rad_to_deg($locatorTargetAngle[0]);\n\t$locatorTargetAngle[1] = rad_to_deg($locatorTargetAngle[1]);\n\t$locatorTargetAngle[2] = rad_to_deg($locatorTargetAngle[2]);\n\t\n\t//Components\n\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0 || $sizeCVsSelected > 0)\n\t{\n        //Get real center pivot location\n       \tint $MPTS_Item;\n   \t    float $vert_location[3];\n        float $center_location[3];\n   \t    string $selected[] = `ls -sl`;\n\t\t\n\t\t//Convert to verts if not nurbs CVs\n\t\tif ($sizeFacesSelected > 0 || $sizeEdgesSelected > 0 || $sizeVertsSelected > 0)\n\t\t{\n\t\t\tConvertSelectionToVertices;\t\t\n\t\t}\n\n   \t    string $selected_Verts[] = `ls -sl -fl`;\n        int $selected_Verts_size = `size $selected_Verts`;\n        string $shapeNode[] = `ls -sl -objectsOnly`;\n        string $objectNode[] = `listRelatives -parent $shapeNode[0]`;\n        select $objectNode;\n\n       \tfor ($MPTS_Item = 0; $MPTS_Item < $selected_Verts_size; $MPTS_Item++)\n   \t    {\n    \t    $vert_location = `pointPosition -world $selected_Verts[$MPTS_Item]`;\n        \t$center_location[0] += $vert_location[0];\n       \t\t$center_location[1] += $vert_location[1];\n\t        $center_location[2] += $vert_location[2];\n        }\n       \t$center_location[0] /= $selected_Verts_size;\n        $center_location[1] /= $selected_Verts_size;\n       \t$center_location[2] /= $selected_Verts_size;\t    \t    \n\t    \n        //Create object and move if components selected\n    \tcPAS_Group();\n        xform -worldSpace -t $center_location[0] $center_location[1] $center_location[2];\n    \txform -s $primitiveScale $primitiveScale $primitiveScale;\n        xform -rotation $locatorTargetAngle[0] $locatorTargetAngle[1] $locatorTargetAngle[2];\n    \t//Rotate 90 to make Y up\n\t    rotate -r -os -fo $rotateX $rotateY $rotateZ;\n    \t//Switch to object mode to fix people using F8\n       \ttoggleSelMode;\n\t    toggleSelMode;\n    \tselectMode -object;\n\t    //Set move tool back to object mode\n    \tmanipMoveContext -edit -mode 0 Move;\n\t}\n\n\t//Objects\n\tif ($sizeObjectsSelected > 0 || $sizeCurveSelected > 0 || $sizeNurbSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Group();\n\t\txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Object selected \" + $primitiveName + \" aligned to object rotation\");\n\t}\n\t\n\t//Locator\n\tif ($sizeLocatorSelected > 0)\n\t{\n\t\t//Get move tool location\n    \tMoveTool;\n\t   \tfloat $locatorTargetPOS[] = `manipMoveContext -q -position \"Move\"`;\n\t  \tfloat $locatorTargetROT[] = `xform -q -rotation`;\n\t   \t//Create object and move it\n\t    cPAS_Group();\n    \txform -ws -t $locatorTargetPOS[0] $locatorTargetPOS[1] $locatorTargetPOS[2];\n    \txform -rotation $locatorTargetROT[0] $locatorTargetROT[1] $locatorTargetROT[2];\n\t\txform -s $primitiveScale $primitiveScale $primitiveScale;\n       \t//Switch to object mode to fix people using F8\n\t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Locator selected \" + $primitiveName + \" aligned to locator rotation\");\n\t}\n\n\t//Nothing\n\tif ($sizeNothingSelected == 0)\n\t{\n    \tcPAS_Group();\n\t    xform -s $primitiveScale $primitiveScale $primitiveScale;\n   \t\ttoggleSelMode;\n\t\ttoggleSelMode;\n\t\tselectMode -object;\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Nothing selected \" + $primitiveName + \" aligned to world\");\n\t}\n\n\t//Face\n\tif ($sizeFacesSelected == 1)\n\t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single face selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Faces Multi\n   \tif ($sizeFacesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi face selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n    \n    //Edge\n\tif ($sizeEdgesSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single edge selected \" + $primitiveName + \" aligned to normal\");\n    }\n    \n    //Edges Multi\n   \tif ($sizeEdgesSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi edge selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n      \n    //Vert\n\tif ($sizeVertsSelected == 1)\n    {\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Single vert selected \" + $primitiveName + \" aligned to normal\");\n\t}\n\t\n\t//Verts Multi\n   \tif ($sizeVertsSelected > 1)\n   \t{\n\t\t//Switch back to user choosen measure unit\n\t\tcurrentUnit -linear $mayaUnits;\n\t\tprint (\"Multi vert selected \" + $primitiveName + \" aligned to average normal\");\n   \t}\n}\n\n\n//***********************************************************************************************************************************************************\n//Window and Buttons\n//***********************************************************************************************************************************************************\nif (`window -exists m341_cPAS_UI`)\n{\n\tdeleteUI m341_cPAS_UI;\n};\n\nwindow -title $m341_cPASVersion -toolbox true -sizeable true -resizeToFitChildren true m341_cPAS_UI;\ncolumnLayout -adjustableColumn true;\ntext -label \"  \" -font \"smallPlainLabelFont\" -width 100;\n\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-label \"帮助\"\n\t\t-backgroundColor 0.51 0.51 0.51\n\t\t-width 100\n\t\t-height 30\n\t\t-command \"m341_cPAS_help;\";\n\t\n\t//Save preferences cPAS scale float field\n\tfloat $Scale_floatFieldValue;\n\tglobal float $m341_cPAS_Scale_userInput;\n\tstring $Scale_OptionVar = `optionVar -exists \"m341_cPAS_ScaleFloatField_VarName\"`;\n\tif ($Scale_OptionVar == 0)\n\t{\n\t\t//Set default value\n\t\toptionVar -floatValue \"m341_cPAS_ScaleFloatField_VarName\" 10.0;\n\t\t$Scale_floatFieldValue = `optionVar -q \"m341_cPAS_ScaleFloatField_VarName\"`;\n\t}\n\telse\n\t{\n\t\t//Query from prefs file\n\t\t$Scale_floatFieldValue = `optionVar -q \"m341_cPAS_ScaleFloatField_VarName\"`;\n\t}\n\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ttext -label \"\" -height 1 -font \"smallPlainLabelFont\";\n\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\tfloatField -value $Scale_floatFieldValue -pre 1 -width 100 -height 20 -changeCommand \"m341_cPAS_Scale_ValueChanged();\" cPAS_Scale_FloatFieldName;\n\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.772 0.521 0.302\n\t\t-width 100\n\t\t-label \"立方体\"\n\t\t-command \"m341_cPAS_CreateCube;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.441 0.529 0.78\n\t\t-width 100\n\t\t-label \"面片\"\n\t\t-command \"m341_cPAS_CreatePlane;\"\n\t\t-commandRepeatable 1;\n\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.34 0.59 0.47\n\t\t-width 100\n\t\t-label \"球体\"\n\t\t-command \"m341_cPAS_CreateSphere;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.32 0.59 0.72\n\t\t-width 100\n\t\t-label \"圆柱\"\n\t\t-command \"m341_cPAS_CreateCylinder;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.50 0.67 0.37\n\t\t-width 100\n\t\t-label \"圆管\"\n\t\t-command \"m341_cPAS_CreatePipe;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.72 0.68 0.39\n\t\t-width 100\n\t\t-label \"螺旋\"\n\t\t-command \"m341_cPAS_CreateHelix;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.70 0.39 0.34\n\t\t-width 100\n\t\t-label \"球\"\n\t\t-command \"m341_cPAS_CreatePlatonic;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.427 0.643 0.643\n\t\t-width 100\n\t\t-label \"圆环\"\n\t\t-command \"m341_cPAS_CreateTorus;\"\n\t\t-commandRepeatable 1;\n\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.32 0.59 0.72\n\t\t-width 100\n\t\t-label \"圆锥\"\n\t\t-command \"m341_cPAS_CreateCone;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.596 0.529 0.769\n\t\t-width 100\n\t\t-label \"定位器\"\n\t\t-command \"m341_cPAS_CreateLocator;\"\n\t\t-commandRepeatable 1;\n\t\t\n\tsetParent ..;\n\trowColumnLayout -numberOfRows 1;\n\ticonTextButton -style \"textOnly\"\n\t\t-backgroundColor 0.51 0.51 0.51\n\t\t-width 100\n\t\t-label \"组\"\n\t\t-command \"m341_cPAS_CreateGroup;\"\n\t\t-commandRepeatable 1;\n\t\nshowWindow;\nprint \"cPAS toolbox loaded\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_在物体上创建组件工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"选择点 线 面  单击对应命令，即可以选中位置为中心创建对应物体。\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "批量传递UV工具" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "UV" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 1 1 1 
        -overlayLabelBackColor 0 0 0 0 
        -image "uvChooser.svg" 
        -image1 "uvChooser.svg" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "////////////批量传递UV工具/////////////\n\nglobal proc callUvOneToN() {\n  \n  string $objSel[] = `ls -sl`;\n  \n  int $numSel = size($objSel);\n  \n  if ($numSel <= 1) {\n    confirmDialog -title \"Message\" -message \"至少选择两个物体\" -button \"OK\" -defaultButton \"OK\";\n    return;\n  }\n  \n  string $source = $objSel[$numSel-1];\n  \n  string $str = \"\";\n  \n  int $i;\n    \n  for ($i=0; $i<$numSel-1; $i++) {\n    polyTransfer -vc 0 -uv 1 -v 0-ao $source $objSel[$i];\n  }\n}\n\n\nif(`window -ex FY_tool_3UV`) deleteUI FY_tool_3UV; \n\n\nwindow -title \"批量传递UV工具\" -sizeable 0 -tlb 0 FY_tool_3UV;\ncolumnLayout  -columnAttach \"both\" 10 -rowSpacing 5 -columnWidth 300;\ntext -h 30 -l \"\";\ntext -fn \"boldLabelFont\" -l \"选择所有物体，UV将会以最后选择的物体为准\";\ntext -h 30-l \"\";\nbutton -l \"传递\" -h 30 -bgc 0.45 0.55 0.27 -c \"callUvOneToN()\";\ntext -h 20 -l \"\";\nsetParent ..;   \nshowWindow FY_tool_3UV;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_批量传递UV工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"选择需要传递UV的模型\\n最后选择正确UV的模型\\n点击执行进行传递\\n传递完毕后记得删除历史哦。\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "指定贴图位置工具" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "file" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "file.svg" 
        -image1 "file.svg" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "///////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n///\n/// Procedure Name :\tFileTextureManager\n///\n///\tVersion :\t4.0.4\n///\n/// Updated :\tAug 27, 2011\n///\n/// Author :\tCrow Yeh (YE Feng)\n/// Contact :\tcrow.yeh@gmail.com\n///\n/// History :\n///\t\tv4.0.4\tFixed problem of using it in Maya 2010.\n///\t\tv4.0.3\tSupport Maya version up to 2012.\n///\t\tv4.0.2\tTiny bugs fixed.\n///\t\tv4.0.1\tRenamed a variable to avoid potential conflicts.\n///\t\tv4.0\tNow compatible with Maya 2011\n///\t\tv3.4\tTiny bug fix\n///\t\tv3.3\tFixed a bug that dselects needed file nodes when user checks\n///\t\t\t\tcheckBoxes not supposed to be checked.\n///\t\tv3.2\tFixed a bug that fails to recognise '\\' as path separator\n///\t\t\t\tunder OS other than Windows.\n///\t\t\t\tExtra functions now supports mentalray.\n///\t\tv3.1\tAdds support (only basic functions) for Maya\n///\t\t\t\tpsdFileTex node type and mentalray mentalRayTexture\n///\t\t\t\tnode type.\n///\n/// Description :\n///\n///\t\tFile Texture Manager works on Windows/IRIX/Linux/MAC, manages file textures in a handy way.\n///\t\tFTM's basic functions:\n///\t\t1. and give texture existence report.\n///\t\t2. Copy or move the original texture files to user defined path (customizable).\n///\t\t3. Update file textures' path info.\n///\t\t4. Handle path strings. eg. replace string, add prefix, append suffix...\n///\n///\t\tFTM's extra fuctions:\n///\t\t1. Substitute file texture's path root string. eg. redirecting sourceiamges...\n///\t\t2. Memory efficiency setup for textures. (BOT for Maya and .map for mentalray.)\n///\t\t3. Filter type batch set.\n///\t\t4. Texture file format conversion.\n///\n/// How to use :\n///\n///\t\tPut the script in your scripts folder then start Maya. Type\n///\t\tand execute\t\"FileTextureManager\" in command line or Script\n///\t\tEditor, an UI window will appear. Then follow the help in the UI\n///\t\twindow to finish your job. Have fun!\n///\n/// Inputs :\tNone\n///\n/// Return :\tNone\n///\n/// All Rights Reserved .\n///////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\n\n///////////////////\n// SCRIPT Starts //\n///////////////////\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Procedure to check selection\n//\nproc int FTM_SelCheck(string $nodes[]){\nint $sel = 0;\nif (size($nodes))\n\t$sel = 1;\nelse\n\tconfirmDialog -t \"File Texture Manager\" -m \"At least one file texture node must be selected!\" -b \"OK\";\nreturn $sel;\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Procedure to remind user that job finished.\n//\nproc FTM_END(){\n\t\tconfirmDialog -t \"File Texture Manager\" -m \"Job finished.\\nRefer to Script Editor for details.\" -ma center -b \"OK\";\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Procedure to give logs\n//\nproc FTM_Log (string $type, string $node, string $log) {\nstring $finLog;\nif (size($node))\n\t$log = $node + \"\\n\";\nelse\n\t$log = \"\\t\" + $log + \"\\n\";\nswitch ($type) {\n\tcase \"start\":\n\t\t$finLog = \"\\n***************************************************************************************************************\\n\\\nFile Texture Manager Log starts...\\n\\\n***************************************************************************************************************\\n\";\n\tbreak;\n\tcase \"end\":\n\t\t$finLog = \"***************************************************************************************************************\\n\\\nFile Texture Manager Log ends...\\n\\\n***************************************************************************************************************\\n\";\n\tbreak;\n\tdefault:\n\t\t$finLog = $log;\n\tbreak;\n}\nprint $finLog;\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Get the right format of path(folder) to match current OS.\n//\nproc string FTM_GetPath (string $FTM_FileOrPath, string $FTM_OldPath)\n//$FTM_FileOrPath\tInput type: file or path\n//$FTM_OldPath\t\tThe input\n{\n\t//Do not use 'fromNativePath' here\n\t//that only works on Windows!\n\t$FTM_OldPath = `substituteAll \"\\\\\\\\\" $FTM_OldPath \"/\"`;\n\t//Only want the path.\n\tif ($FTM_FileOrPath == \"file\")\n\t\t$FTM_OldPath = `dirname $FTM_OldPath`;\n\t//Get rid of the slash at the end.\n\t$FTM_OldPath = `substitute \"/*$\" $FTM_OldPath \"\"`;\n\t//Get the right path.\n\tstring $FTM_RightPath;\n\tif (size($FTM_OldPath)) $FTM_RightPath = `toNativePath ($FTM_OldPath + \"/\")`;\n\treturn $FTM_RightPath;\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Get the right format of input file's fullname (including path) to match current OS.\n// Return a string array, the first element is the right format of the input file's\n// fullname (including path), the second element is the shortname of input file (without path).\n//\nproc string[] FTM_GetFile (string $FTM_OldFullPath)\n{\n\tstring $FTM_RightPath[];\n\tstring $FTM_PathElements[];\n\tint $FTM_PathElementsSize;\n\t// fullname\n\t$FTM_OldFullPath = `substituteAll \"\\\\\\\\\" $FTM_OldFullPath \"/\"`;\n\t$FTM_RightPath[0] = `toNativePath $FTM_OldFullPath`;\n\t$FTM_PathElementsSize = `tokenize $FTM_OldFullPath \"/\" $FTM_PathElements`;\n\t$FTM_RightPath[1] = $FTM_PathElements[$FTM_PathElementsSize - 1];\n\treturn $FTM_RightPath;\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Analyse all the file texture nodes in current scene.\n//\nproc string[] FTM_FileTextureAnalyst ()\n{\n// All the file texture nodes maybe point to texture files in different paths(folders).\n// Here I use  \"group\" to indicate different paths , which means there are n \"groups\" of\n// different paths if the file texture nodes point to files in n different paths.\n\n// The trick is to have an string array $FTM_Groups[], within which every element has corresponding\n// path and nodes pointing to that path are concatenated togather with a \"*\", which is not supposed to appear in path or name.\n// Every element has a form style of \"path*node1*node2*node3...\"\n// Leave $FTM_Groups[0] for empty path, which means node's texture file was not specified.\n// Leave $FTM_Groups[1] for files without path, which means only texture file's short name was presented but path info was missing.\n\n\t// All the file texture nodes found in current scene.\n\tglobal string $lsCmd;\n\tstring $FTM_Files[] = eval($lsCmd);\n\n\t// Different groups.\n\tstring $FTM_Groups[];\n\tint $FTM_GroupsSize;\n\tif (size($FTM_Files)){\n\t\t$FTM_Groups[0] = \"FTM_EmptySocket_FTM\";\n\t\t$FTM_Groups[1] = \"FTM_MissingPathSocket_FTM\";\n\t}\n\n\t// Figure out how many \"groups\" there are in current scene, and put each file texture node\n\t// into proper \"group\".\n\tfor ($eachFile in $FTM_Files)\n\t{\n\t\t$FTM_GroupsSize = size($FTM_Groups);\n\t\t// Get the path of current file texture node\n\t\tstring $FTM_CurrentFullPath = substituteAll (\"\\\\\\\\\", `getAttr ($eachFile + \".fileTextureName\")`, \"/\");\n\t\tstring $FTM_CurrentPath = dirname ($FTM_CurrentFullPath);\n\n\t\t// File texutre was specified.\n\t\tif (size($FTM_CurrentPath))\n\t\t{\n\t\t\t// Compare current path to all \"groups\" have been found. If matches then append current node\n\t\t\t// to current \"group\" and exist the compare loop immediately.\n\t\t\t// Remember that socket [0] is kept for nodes without texture file specified\n\t\t\t// Remember that socket [1] is kept for nodes with texture file specified but with the path info missing\n\t\t\tfor ($j=2; $j<$FTM_GroupsSize; $j++)\n\t\t\t{\n\t\t\t\tstring $buffer[];\n\t\t\t\ttokenize $FTM_Groups[$j] \"*\" $buffer;\n\t\t\t\t// Get the path of current \"group\".\n\t\t\t\tstring $FTM_OldPath =  $buffer[0];\n\t\t\t\tstring $cmp1 = $FTM_CurrentPath;\n\t\t\t\tstring $cmp2 = $FTM_OldPath;\n\t\t\t\t// Windows is not case sensitive to path\n\t\t\t\tif (`about -nt`) {\n\t\t\t\t\t$cmp1 = tolower($FTM_CurrentPath);\n\t\t\t\t\t$cmp2 = tolower($FTM_OldPath);\n\t\t\t\t}\n\t\t\t\t// Compare current path to all \"groups\" have been found.\n\t\t\t\tif ($cmp1 == $cmp2)\n\t\t\t\t{\n\t\t\t\t\t// Append current node to current group\n\t\t\t\t\tstring $tmp = $FTM_Groups[$j];\n\t\t\t\t\t$tmp += \"*\" + $eachFile;\n\t\t\t\t\t$FTM_Groups[$j] = $tmp;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// No \"group\" matches means new \"group\" was found.\n\t\t\tif ($j >= $FTM_GroupsSize)\n\t\t\t{\n\t\t\t\t// Create a new \"group\" and append current file texure node.\n\t\t\t\t$FTM_Groups[$FTM_GroupsSize] = $FTM_CurrentPath + \"*\" + $eachFile;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t// File texture was specified but the path info was missing\n\t\telse if (size($FTM_CurrentFullPath)){\n\t\t\tstring $tmp = $FTM_Groups[1];\n\t\t\t$tmp += \"*\" + $eachFile;\n\t\t\t$FTM_Groups[1] = $tmp;\n\t\t}\n\t\t// File texture was not specified yet. Append current node to the first socket of groups\n\t\telse{\n\t\t\tstring $tmp = $FTM_Groups[0];\n\t\t\t$tmp += \"*\" + $eachFile;\n\t\t\t$FTM_Groups[0] = $tmp;\n\t\t}\n\t}\n\n\tselect -cl;\n\treturn $FTM_Groups;\n}\n\n///////////////////////////////////////////////////////\n///////////////////////////////////////////////////////\n//\n// Edit the UI Controls after they've been built\n//\nproc FTM_EditUIControl (string $FTM_OptionColumn, string $FTM_HelpForm)\n{\n// Operation mode\n\tradioButtonGrp -e -on1 (\"textFieldButtonGrp -e -en 0 -tx \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_SourceDirectoryField\")\n\t\t\t-on2 (\"textFieldButtonGrp -e -en 1 -tx \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_SourceDirectoryField\")\n\t\t\t($FTM_OptionColumn + \"|FTM_OperationMode\");\n// Set source directory\n\ttextFieldButtonGrp -e -bc (\"FTM_BrowseCmd \\\"file\\\" \\\"\" + $FTM_OptionColumn + \"|FTM_SourceDirectoryField\\\" \\\"Set_S.D.\\\" 0\")\n\t\t\t($FTM_OptionColumn + \"|FTM_SourceDirectoryField\");\n// Set target directory\n\ttextFieldButtonGrp -e -bc (\"FTM_BrowseCmd \\\"path\\\" \\\"\" + $FTM_OptionColumn + \"|FTM_TargetDirectoryField\\\" \\\"Set_T.D.\\\" 4\")\n\t\t\t($FTM_OptionColumn + \"|FTM_TargetDirectoryField\");\n// Make new folder\n\tcheckBoxGrp -e -on1 (\"textFieldGrp -e -en 1 -text \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_NewFolderNameField\")\n\t\t\t-of1 (\"textFieldGrp -e -en 0 -text \\\"MyTextureFiles\\\" \" + $FTM_OptionColumn + \"|FTM_NewFolderNameField\")\n\t\t\t($FTM_OptionColumn + \"|FTM_MakeFolderChecker\");\n// Add prefix\n\tcheckBox -e -onc (\"textField -e -en 1 -text \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_PrefixField\")\n\t\t\t-ofc (\"textField -e -en 0 -text \\\"prefix_\\\" \" + $FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_PrefixField\")\n\t\t\t($FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_AddPrefixChecker\");\n// Add suffix\n\tcheckBox -e -onc (\"textField -e -en 1 -text \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_SuffixField\")\n\t\t\t-ofc (\"textField -e -en 0 -text \\\"_suffix\\\" \" + $FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_SuffixField\")\n\t\t\t($FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_AddSuffixChecker\");\n// Replace string\n\tcheckBoxGrp -e -on1 (\"textFieldGrp -e -en 1 -text \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_OldStringField; textFieldGrp -e -en 1 -text \\\"\\\" \" + $FTM_OptionColumn + \"|FTM_NewStringField\")\n\t\t\t-of1 (\"textFieldGrp -e -en 0 -text \\\"OldString\\\" \" + $FTM_OptionColumn + \"|FTM_OldStringField; textFieldGrp -e -en 0 -text \\\"NewString\\\" \" + $FTM_OptionColumn + \"|FTM_NewStringField\")\n\t\t\t($FTM_OptionColumn + \"|FTM_ReplaceStringChecker\");\n\n// Help description field\n\tstring $FTM_HelpDescription = \"\\n[Description]:\\n\";\n\t\t$FTM_HelpDescription += \"  File Texture Manager works on Windows/IRIX/Linux/MAC, manages file textures in a very handy way.\\n\";\n\t\t$FTM_HelpDescription += \"  FTM basic functions:\\n\";\n\t\t$FTM_HelpDescription += \"  1. 分析场景文件纹理.\\n\";\n\t\t$FTM_HelpDescription += \"  2. Copy or move the original texture files to user defined path.\\n\";\n\t\t$FTM_HelpDescription += \"  3. Update file textures' path.\\n\";\n\t\t$FTM_HelpDescription += \"  4. Mentalray texture node is supported too.\\n\";\n\t\t$FTM_HelpDescription += \"  FTM extra functions:\\n\";\n\t\t$FTM_HelpDescription += \"  1. Substitute file texture path's root string. eg. redirecting sourceiamges...\\n\";\n\t\t$FTM_HelpDescription += \"  2. Memory efficiency setup/unset for file textures according to their resolution. Textures larger than Threshold (in either x or y) will be set to use renderer prefered format (BOT for Maya and .map for mentalray) in setup mode. Corresponding memory-efficient file will be automatically generated if needed. When unset, all textures smaller than threshold in both x and y will be set to use normal textures, from which file the memory efficient texture was generated. BOT unset assume normal texture exist in the same directory. Mentalray .map unset will first check if the normal texture exist. If not, FTM will try to extract one from the .map file. Nodes pointing to sequences will be ignored.\\n\";\n\t\t$FTM_HelpDescription += \"  3. Set filter type to specified type for selected file nodes.\\n\";\n\t\t$FTM_HelpDescription += \"  4. Convert texture file format from \\\"From\\\" to \\\"To\\\" for selected file nodes. If \\\"From\\\" is not \\\"*\\\", only file nodes whose texture files format match \\\"From\\\" will be handled. For file nodes use image sequence as texture files, the range for conversion need to be specified, so only print out corresponding commands instead of really do the jobs. This function use Maya \\\"imgcvt\\\" and mentalray \\\"imf_copy\\\" ultility to do the conversion, so make sure them can be found in system executable path.\\n\\n\";\n\t\t$FTM_HelpDescription += \"[Work Flow]:\\n\";\n\t\t$FTM_HelpDescription += \"  Step 1. 分析场景文件纹理.(optional)\\n\";\n\t\t$FTM_HelpDescription += \"  Step 2. Select scene file textures (nodes) you want to manage by checking on the related checkers in the UI. You can also do this by your own method, Eg. select them in Hypershade.\\n\";\n\t\t$FTM_HelpDescription += \"  Step 3. Set options as needed.\\n\";\n\t\t$FTM_HelpDescription += \"  Step 4. Do copy, move or set by pressing related button.\\n\\n\";\n\t\t$FTM_HelpDescription += \"[Tips]:\\n\";\n\t\t$FTM_HelpDescription += \"  1. Always keep 2 different version for each texture file. Eg. \\\"abc_LowRes.tga\\\" is in low resolution while \\\"abc_HighRes.tga\\\" is in high resolution. Do your job using low-res textures to speed the interactant. Just remember to use FileTextureManager to reset each file texture to point to the related high-res texture before rendering. (Add prefix, add suffix or even replace string.)\\n\";\n\t\t$FTM_HelpDescription += \"  2. The FileTextureManager's UI does not update dynamically like what Attribute Editor does, so it is better to re-分析场景文件纹理 each time you finish an FTM job. This is not necessary if you do not use the Analyse function at all.\\n\\n\";\n\t\t$FTM_HelpDescription += \"[Notes]:\\n\";\n\t\t$FTM_HelpDescription += \"  1. Final target directory will be equal to target directory plus new folder, if user decide to make a new folder.\\n\";\n\t\t$FTM_HelpDescription += \"  2. Add suffix function has limitation on the texture file name. To be sure it work as desired, the file name must be in a regular format, Eg. \\\"filename.ext\\\", \\\"filename.[#...#].ext\\\", \\\"filename.ext.[#...#]\\\", etc.\\n\";\n\t\t$FTM_HelpDescription += \"  3. Add prfix, add suffix and replace string can be executed at the same time to each file texture. Replace string is caculated first, then add suffix, and add prefix last.\\n\";\n\t\t$FTM_HelpDescription += \"  4. It is highly recommended not to contain \\\".\\\" in prefix, suffix, old string and new string.\\n\";\n\t\t$FTM_HelpDescription += \"  5. Sometimes process fails. The reason may be various. The most possible reason could be one of or both the following two: a. Texture file is not found in the source directory; b. Permission denied on reading or writing or deleting.\\n\\n\";\n\t\t$FTM_HelpDescription += \"[Details]:\\n\";\n\t\t$FTM_HelpDescription += \"  1. Analysing scene file textures let you know how many file textures there are in the scene, where there are, whether they exist or not, etc. It also allows user select all the texture files point to same path by only one simple click.\\n\";\n\t\t$FTM_HelpDescription += \"  2. How to choose operation mode depends on different source directory status. If file is there where it point to, use Automatic mode, otherwise use Manual mode.\\n\";\n\t\t$FTM_HelpDescription += \"  3. Other functions are pretty definite as marked in the UI.\\n\";\n\n\tscrollField -e -text $FTM_HelpDescription ($FTM_HelpForm + \"|FTM_HelpField\");\n}\n\n/////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////\n//\n// judge if the input string is format extension, sequence or just part of file basename\n//\nproc int FTM_FCWhatIs(string $string)\n{\nint $isWhat;\n// 0 - format extension\n// 1 - sequence number\n// 2 - nothing, is just file basename\n// 3 - bot\nglobal string $FTM_FCAllFormats[];\n$string = tolower($string);\n\nif (stringArrayCount($string,$FTM_FCAllFormats))\n\t$isWhat = 0;\nelse if (size(match(\"[0-9]*\",$string)) == size($string))\n\t$isWhat = 1;\nelse if ($string == \"bot\")\n\t$isWhat = 3;\nelse\n\t$isWhat = 2;\n\nreturn $isWhat;\n}\n\n////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////\n//\n// judge texture file format, only according to the possible extension name\n//\nproc string[] FTM_FCFileRegularName(string $file)\n{\n$file = substituteAll (\"\\\\\\\\\", $file, \"/\");\nstring $fileRegularName[] = stringToStringArray(basename($file,\"\"),\".\");\n// try to make it like below\n// [0] - file name\n// [1] - the sequency number if presented, or \"\"\n// [2] - the extension if presented, or \"\"\n\nstring $fileName;\nstring $seqNum;\nstring $fileFormat;\n\nswitch (size($fileRegularName))\n\t{\n\tcase 0: // sick!!!\n\tbreak;\n\tcase 1:// only file name presented\n\t\t$fileName = $fileRegularName[0];\n\tbreak;\n\tcase 2:// the second/last element could be sequence number, format extension or nothing;\n\t\tif (FTM_FCWhatIs($fileRegularName[1]) == 0)\n\t\t\t{\n\t\t\t$fileName = $fileRegularName[0];\n\t\t\t$fileFormat = $fileRegularName[1];\n\t\t\t}\n\t\telse if (FTM_FCWhatIs($fileRegularName[1]) == 1)\n\t\t\t{\n\t\t\t$fileName = $fileRegularName[0];\n\t\t\t$seqNum = $fileRegularName[1];\n\t\t\t}\n\t\telse // FTM_FCWhatIs($fileRegularName[1]) = 2, which means the second/last element is just part of file basename, sick!!!\n\t\t\t$fileName = basename($file,\"\");\n\tbreak;\n\tdefault: // there are 3 or more pieces. consider the last 2 only.\n\t\tstring $lastPiece = $fileRegularName[size($fileRegularName)-1];\n\t\tif (FTM_FCWhatIs($lastPiece) == 0)\n\t\t\t{\n\t\t\t$fileFormat = $lastPiece;\n\t\t\t$fileName = basenameEx($file);\n\t\t\t// strip the last piece to judge again\n\t\t\t$lastPiece = $fileRegularName[size($fileRegularName)-2];\n\t\t\tif (FTM_FCWhatIs($lastPiece) == 1)\n\t\t\t\t{\n\t\t\t\t$seqNum = $lastPiece;\n\t\t\t\t$fileName = basenameEx($fileName);\n\t\t\t\t}\n\t\t\t}\n\t\telse if (FTM_FCWhatIs($lastPiece) == 1)\n\t\t\t{\n\t\t\t$seqNum = $lastPiece;\n\t\t\t$fileName = basenameEx($file);\n\t\t\t// strip the last piece to judge again\n\t\t\t$lastPiece = $fileRegularName[size($fileRegularName)-2];\n\t\t\tif (FTM_FCWhatIs($lastPiece) == 0)\n\t\t\t\t{\n\t\t\t\t$fileFormat = $lastPiece;\n\t\t\t\t$fileName = basenameEx($fileName);\n\t\t\t\t}\n\t\t\t}\n\t\telse if (FTM_FCWhatIs($lastPiece) == 3) //bot\n\t\t\t{\n\t\t\t$fileFormat = $fileRegularName[size($fileRegularName)-2] + \".bot\";\n\t\t\tif (size($fileRegularName) == 3)\n\t\t\t\t$fileName = $fileRegularName[0];\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t$lastPiece = $fileRegularName[size($fileRegularName)-3];\n\t\t\t\tif (FTM_FCWhatIs($lastPiece) == 1)\n\t\t\t\t\t{\n\t\t\t\t\t$seqNum = $lastPiece;\n\t\t\t\t\t$fileName = basenameEx(basenameEx(basenameEx($file)));\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t$fileName = basenameEx(basenameEx($file));\n\t\t\t\t}\n\t\t\t}\n\t\telse // really sick!!!\n\t\t\t$fileName = basename($file,\"\");\n\tbreak;\n\t}\n\n$fileRegularName[0] = $fileName;\n$fileRegularName[1] = $seqNum;\n$fileRegularName[2] = $fileFormat;\n\nreturn $fileRegularName;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// check string $inputString,replace the first (count backwards) matching string $targetPattern with string $newPattern\n//\nproc string FTM_FCSubstituteLastPattern(string $inputString, string $targetPattern, string $newPattern)\n{\n$inputString = substituteAll(\"\\\\\\\\\", $inputString, \"/\");// avoid to handle \"\\\" in the path\n\n//strip everything behind the last string $targetPattern's existence\nstring $exp1 = \"^.*\" + $targetPattern + \"+\";\nstring $noTail = match($exp1,$inputString);\n\n//replace the last $targetPattern in $noTail with $newPattern\nstring $exp2 = $targetPattern + \"+$\";\nstring $newNoEnd = substitute($exp2,$noTail,$newPattern);\n\n//replace $noTail part in $inputString with $newNoEnd\n// substitute all special characters\nstring $badChar[] = {\"+\",\".\",\"^\",\"$\",\"[\",\"]\",\"(\",\")\"};\nfor ($char in $badChar)\n\t$noTail = `substituteAllString $noTail $char (\"\\\\\"+$char)`;\nstring $exp3 = \"^\" + $noTail + \"+\";//take care of \"\\\", so encode string.\nstring $outputString = substitute($exp3,$inputString,$newNoEnd);\n\n$outputString = toNativePath($outputString);\nreturn $outputString;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// to analyse the number of digits for input filename\n//\nproc int FTM_FCDigitsNumber(string $fileName)\n{\nstring $fileRegularName[] = FTM_FCFileRegularName($fileName);\n$fileName = FTM_FCSubstituteLastPattern($fileName,$fileRegularName[1],\"*\");\nstring $filesInSeq[] = `getFileList -fs $fileName`;\n\nint $digiNum = 0;\nfor ($i=0;$i<size($filesInSeq);$i++)\n\t{\n\tstring $tmp[] = FTM_FCFileRegularName($filesInSeq[$i]);\n\tif ($digiNum <= size($tmp[1]))\n\t\t$digiNum = size($tmp[1]);\n\t}\n\nreturn $digiNum;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// the file format converter\n//\nproc FTM_FCGo(int $progressUI, string $sourceFormatUI, string $targetFormat, int $handleSeq, int $updatePath, int $removeOrig)\n//int $progressUI\t\t\t- need progress UI; 0 - No UI for progress, which is designed for command line uses.\n//string $sourceFormatUI\t- format convert from\n//string $targetFormat\t\t- format convert to\n//int $handleSeq\t\t\t- handle sequence textures; 0 - do not handle sequence textures.\n//int $updatePath\t\t\t- update path info; 0 - do not update path info.\n//int $removeOrig\t\t\t- remove original textures; 0 - do not remove original textures.\n{\nif (FTM_SelCheck(`ls -sl -typ file `)) {// if (0)\n\twaitCursor -state on;\n\tFTM_Log \"start\" \"\" \"\";\n\t// list for file nodes to be handled\n\tstring $fileNodesList[] = FTM_FCGetMatches($sourceFormatUI);\n\n\tint $isSeq[];// if it is using an image sequence as texture\n\tint $isOneOfSeq[];// if it is using only one image of a whole sequence as texture.\n\n\n\tstring $file;// current file to be converted\n\tstring $fileFC;// current file in suitable naming for FC use\n\tstring $fileUpdatePath;// current file in suitable naming for updatePath use\n\tstring $fileRemove;// current file in proper naming for removing\n\n\t// build progress feedback only in UI mode\n\tif ($progressUI) {\n\t\t// base of progress feedback setup\n\t\tint $progress = 0;\n\t\tint $percentage = 0;\n\t\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size($fileNodesList)`;\n\t}\n\n\t// executes cooresponding commands for each file node specified.\n\t// the core process.\n\tfor ($i=0;$i<size($fileNodesList);$i++){ //for loop (1)\n\t\tFTM_Log \"\" ($fileNodesList[$i]+\":\") \"\";\n\t\t// build progress feedback only in UI mode\n\t\tif ($progressUI){\n\t\t\t// Check if the dialog has been cancelled\n\t\t\tif ( `progressWindow -q -ic` ){\n\t\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$progress = $i+1;\n\t\t\t$percentage = $progress * (100/size($fileNodesList));\n\t\t\tprogressWindow -e -pr $progress -st (\"Handling \" + $fileNodesList[$i] + \"     ......  \" + $percentage + \"%\");\n\t\t}\n\n\t\t$file = toNativePath(substituteAll(\"\\\\\\\\\",`getAttr ($fileNodesList[$i] + \".fileTextureName\")`,\"/\"));\n\t\t$fileFC = $file;\n\t\t$fileRemove = $file;\n\t\tstring $fileRegularName[] = FTM_FCFileRegularName($file);\n\t\tstring $isBOT = `match \"bot\" $fileRegularName[2]`;\n\t\tif (size($isBOT)) {\n\t\t\tFTM_Log \"\" \"Texture file is a BOT file. Skipped!\" \"\";\n\t\t\tcontinue;\n\t\t}\n\t\tstring $targetFile = FTM_FCSubstituteLastPattern($file,$fileRegularName[2],$targetFormat);\n\n\t\t// it is bad that a file has no extension to indicate its format, so add one if needed.\n\t\tif (!size($fileRegularName[2]))\n\t\t\t$targetFile += \".\" + $targetFormat;\n\t\t$fileUpdatePath = $targetFile;\n\t\tstring $cmp1,$cmp2;\n\t\t$cmp1 = $fileUpdatePath;\n\t\t$cmp2 = $fileRemove;\n\t\tif (`about -nt`) {\n\t\t\t$cmp1 = toNativePath(tolower($cmp1));\n\t\t\t$cmp2 = toNativePath(tolower($cmp2));\n\t\t}\n\t\t// skip all process if the file node was already handled before.\n\t\tif($cmp1 == $cmp2)\n\t\t\tFTM_Log \"\" \"\" \"This file node was already handled before. Process skipped.\";\n\n\t\telse{ //else (1)\n\t\t\t$isSeq[$i] = 0;\n\t\t\t$isOneOfSeq[$i] = 0;\n\t\t\tif (`nodeType $fileNodesList[$i]` == \"file\" && size($fileRegularName[1])) {\n\t\t\t\tif (`getAttr ($fileNodesList[$i] + \".useFrameExtension\")`)\n\t\t\t\t\t$isSeq[$i] = 1;\n\t\t\t\telse\n\t\t\t\t\t$isOneOfSeq[$i] = 1;\n\t\t\t}\n\n\t\t\t//commands to execute\n\t\t\tint $isMR_c = 0; //create .map file\n\t\t\tint $isMR_x = 0; //extract .map file\n\t\t\tif ($fileRegularName[2] == \"map\" && $targetFormat != \"map\")\n\t\t\t\t$isMR_x = 1;\n\t\t\telse if ($fileRegularName[2] != \"map\" && $targetFormat == \"map\")\n\t\t\t\t$isMR_c = 1;\n\t\t\tstring $cmdFC = \"system(\\\"\";\n\t\t\tif ($isMR_c)\n\t\t\t\t$cmdFC += \"imf_copy -p -r\";\n\t\t\telse if ($isMR_x)\n\t\t\t\t$cmdFC += \"imf_copy\";\n\t\t\telse\n\t\t\t\t$cmdFC += \"imgcvt -t \" + $targetFormat;\n\t\t\tstring $cmdUpdatePath = \"setAttr -typ \\\"string\\\" \" + $fileNodesList[$i] + \".fileTextureName \";\n\t\t\tstring $cmdRemoveOrig = \"sysFile -del \\\"\";\n\n\t\t\tif (!$handleSeq && $isSeq[$i])\n\t\t\t\tFTM_Log \"\" \"\" \"Sequence was not selected to be handled. Skipped.\";\n\t\t\telse { //else (2)\n\t\t\t\t// need to handle sequence textures\n\t\t\t\tif ($handleSeq && $isSeq[$i]){\n\t\t\t\t\tstring $padding = \"\";\n\t\t\t\t\tfor ($j=0;$j<FTM_FCDigitsNumber($file);$j++)\n\t\t\t\t\t\t$padding += \"@\";\n\t\t\t\t\t$targetFile = FTM_FCSubstituteLastPattern($targetFile,$fileRegularName[1],$padding);\n\t\t\t\t\t$fileFC = FTM_FCSubstituteLastPattern($file,$fileRegularName[1],$padding);\n\t\t\t\t\t$fileRemove = FTM_FCSubstituteLastPattern($file,$fileRegularName[1],\"*\");\n\n\t\t\t\t\t//command for sequence\n\t\t\t\t\tif (!$isMR_c && !$isMR_x)\n\t\t\t\t\t\t$cmdFC += \" -n startIn endIn stepIn -N startOut endOut stepOut\";\n\t\t\t\t}\n\t\t\t\t$cmdFC += \" \\\\\\\"\" + encodeString($fileFC) + \"\\\\\\\" \\\\\\\"\" + encodeString($targetFile) + \"\\\\\\\"\";\n\t\t\t\tif ($isMR_c || $isMR_x)\n\t\t\t\t\t$cmdFC += \" \" + $targetFormat + \"\\\")\";\n\t\t\t\telse\n\t\t\t\t\t$cmdFC += \"\\\")\";\n\t\t\t\t// only do the convertion when target file doesn't exist,\n\t\t\t\t// or convertion has been done before for other file node that shares the same texture.\n\t\t\t\tif (`file -q -ex $fileUpdatePath`)\n\t\t\t\t\tFTM_Log \"\" \"\" \"Convertion skipped. New format texture exists, maybe convertion has been done before.\";\n\t\t\t\telse{ //else (3)\n\t\t\t\t\tif (!$isSeq[$i]){\n\t\t\t\t\t\t// system feedback\n\t\t\t\t\t\tstring $cmdFCFeedback = eval($cmdFC);\n\t\t\t\t\t\tif (size($cmdFCFeedback))\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" $cmdFCFeedback;\n\t\t\t\t\t\tif (`file -q -ex $fileUpdatePath`)\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Convertion succeeded. Converted from \\\"\" + $fileFC + \"\\\" to \\\"\" + $targetFile + \"\\\".\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"Convertion failed. Could be file permission problem, disk capacity problem or source texture is of unknown/unsupported format.\";\n\t\t\t\t\t}\n\t\t\t\t\telse { // for sequence, only print out command to execute.\n\t\t\t\t\t\tif (!$isMR_c && !$isMR_x)\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Sequence specified. Command to execute (format conversion):\" + $cmdFC);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"Sequence specified. Use \\\"imf_copy\\\" to convert your tetures. A simple loop might be needed.\";\n\t\t\t\t\t}\n\t\t\t\t}// else (3)\n\n\t\t\t\t// need to update path info\n\t\t\t\tif ($updatePath) {// if (1)\n\t\t\t\t\t$cmdUpdatePath += \"\\\"\" + encodeString(toNativePath($fileUpdatePath)) + \"\\\";\";\n\t\t\t\t\t$cmdRemoveOrig += encodeString($fileRemove) + \"\\\";\";\n\n\t\t\t\t\tif (!$isSeq[$i]){// if (2)\n\t\t\t\t\t\tif (`file -q -ex $fileUpdatePath`){ // if (3)\n\t\t\t\t\t\t\tif(catchQuiet(eval($cmdUpdatePath))) {\n\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTextureName\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Path updating failed. So Original Texture Removing will not be done even if it was selected to.\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {// else (3)\n\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Path updating succeeded. Set to \\\"\" + (toNativePath($fileUpdatePath)) + \"\\\".\");\n\t\t\t\t\t\t\t\t// need to remove old textures\n\t\t\t\t\t\t\t\t// only remove old textures when updatePath is selected and updating succeeds\n\t\t\t\t\t\t\t\tif ($removeOrig){ //if (4)\n\t\t\t\t\t\t\t\t\tif ($isOneOfSeq[$i])\n\t\t\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"Only one file of a whole sequence is used as texture, no file in the sequence is supposed to be removed.\";\n\t\t\t\t\t\t\t\t\telse if (!$isSeq[$i]){ // else if (1)\n\t\t\t\t\t\t\t\t\t\tif (!eval($cmdRemoveOrig))\n\t\t\t\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"Original texture removing failed, could be file permission problem.\";\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Original texture removing succeeded. Removed \\\"\" + $fileRemove + \"\\\".\");\n\t\t\t\t\t\t\t\t\t} // else if (1)\n\t\t\t\t\t\t\t\t} // if (4)\n\t\t\t\t\t\t\t}// else (3)\n\t\t\t\t\t\t} // if (3)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" \"Convertion failed, Path Updating and Original Texture Removing will not be done even if they were selected to.\";\n\t\t\t\t\t} // if (2)\n\t\t\t\t\t// for sequence, only print out command to execute\n\t\t\t\t\telse { //else (4)\n\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Sequence specified. Command to execute (update path info):\" + $cmdUpdatePath);\n\t\t\t\t\t\tif ($removeOrig)\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Sequence specified. Command to execute (remove original textures):\" + $cmdRemoveOrig);\n\t\t\t\t\t}// else (4)\n\t\t\t\t} // if (1)\n\t\t\t} //else (2)\n\t\t} // else(1)\n\t} // for loop (1)\n\n\t// feedback ends\n\tif (!size($fileNodesList))\n\t\tFTM_Log \"\" \"No texture is of specified format.\" \"\";\n\n\t// build progress feedback only in UI mode\n\tif ($progressUI){\n\t\t// finish progress feed back\n\t\tprogressWindow -ep;\n\t\tFTM_Log \"end\" \"\" \"\";\n\t\t// job done\n\t\tFTM_END;\n\t}\n\twaitCursor -state off;\n} // if (0)\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// analyse all possible file nodes to find out those match user's specification\n//\nglobal proc string[] FTM_FCGetMatches (string $formatUI)\n{\nstring $fileNodesList[]; // list for file nodes to be handled\nstring $tmpNodesList[] = `ls -sl -typ file `; // list for all (selected) file nodes, which need to be analyse.\nif (`FTM_SelCheck $tmpNodesList`) {\n\tstring $tmpNode; // each single file node in the list\n\tstring $tmpFile; // file that $tmpNode point to.\n\n\tstring $format = `optionMenu -q -v $formatUI`;\n\tif ($format!=\"*\") {// format from specified, so only handle files with that format\n\t\tfor ($tmpNode in $tmpNodesList)\t{\n\t\t\t$tmpFile = `getAttr ($tmpNode + \".fileTextureName\")`;\n\t\t\tstring $tmpFileRegularName[] = FTM_FCFileRegularName($tmpFile);\n\t\t\tif (tolower($tmpFileRegularName[2]) == tolower($format))// extension matches, this file node need to be handled\n\t\t\t\t$fileNodesList[size($fileNodesList)] = $tmpNode;\n\t\t}\n\t}\n\telse // \"*\" was selected as format from, which means to handle all (selected) file nodes\n\t\t$fileNodesList = $tmpNodesList;\n}\nreturn $fileNodesList;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// info transfer, just to make sure FTM_FCGo can be run in command line.\n//\nglobal proc FTM_FCGatherInfo(string $FTM_ExtraFunctionColumn)\n{\nstring $sourceFormatUI = $FTM_ExtraFunctionColumn + \"|FTM_FCRow|FTM_FCSourceMenu\";\nstring $targetFormat = `optionMenu -q -v ($FTM_ExtraFunctionColumn + \"|FTM_FCRow|FTM_FCTargetMenu\")`;\nint $handleSeq = `checkBox -q -v ($FTM_ExtraFunctionColumn + \"|FTM_SeqCheck\")`;\nint $updatePath = `checkBox -q -v ($FTM_ExtraFunctionColumn + \"|FTM_UpdateCheck\")`;\nint $removeOrig = `checkBox -q -v ($FTM_ExtraFunctionColumn + \"|FTM_RemoveCheck\")`;\n\nFTM_FCGo \t1\n\t\t$sourceFormatUI\n\t\t$targetFormat\n\t\t$handleSeq\n\t\t$updatePath\n\t\t$removeOrig;\n}\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n// Command for Filter Setup\n//\nglobal proc FTM_FilterSetup(string $FTM_ExtraFunctionColumn)\n{\nstring $Nodes[] = `ls -sl -typ file`;\nif (`FTM_SelCheck $Nodes`) {\n\twaitCursor -state on;\n\tFTM_Log \"start\" \"\" \"\";\n\tint $filterType = `optionMenu -q -sl ($FTM_ExtraFunctionColumn+\"|FTM_FilterTypeRow|FTM_FilterTypeMenu\")` -1;\n\tstring $filter = `optionMenu -q -v ($FTM_ExtraFunctionColumn+\"|FTM_FilterTypeRow|FTM_FilterTypeMenu\")`;\n\n\tint $progress = 0;\n\tint $percentage = 0;\n\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size $Nodes`;\n\n\tfor ($i=0;$i<size($Nodes);$i++) {\n\t\tFTM_Log \"\" ($Nodes[$i]+\":\") \"\";\n\t\tif ( `progressWindow -q -ic` ){\n\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\tbreak;\n\t\t}\n\t\t$progress = $i;\n\t\t$percentage = $progress * 100 / size($Nodes);\n\t\tprogressWindow -e -pr $progress -st (\"Setting filter type, please wait......      \" + $percentage + \"%\");\n\n\t\tstring $cmd = \"setAttr \" + $Nodes[$i] + \".filterType \" + $filterType;\n\t\tif (catchQuiet(eval($cmd)))\n\t\t\tFTM_Log \"\" \"\" \"Attribute \\\"filterType\\\" is locked/connected and can NOT be modified!\";\n\t\telse\n\t\t\tFTM_Log \"\" \"\" (\"Set filter type to \\\"\" + $filter + \"\\\"\");\n\t}\n\tprogressWindow -ep;\n\tFTM_Log \"end\" \"\" \"\";\n\tFTM_END;\n\twaitCursor -state off;\n}\n}\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n// Command for BOT setup\n//\nglobal proc FTM_BOTSetup(int $FTM_BOTMode, string $FTM_ExtraFunctionColumn)\n//$FTM_BOTMode\t\t-\t1 Setup\n//\t\t\t\t\t-\t0 Unset\n{\nstring $FTM_FileNodes[]=`ls -sl -typ file`;\nif (`FTM_SelCheck $FTM_FileNodes`) {\n\twaitCursor -state on;\n\tFTM_Log \"start\" \"\" \"\";\n\tint $progress = 0;\n\tint $percentage = 0;\n\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size $FTM_FileNodes`;\n\n\tfor ($i=0; $i<size($FTM_FileNodes); $i++){\n\t\tFTM_Log \"\" ($FTM_FileNodes[$i]+\":\") \"\";\n\t\tif ( `progressWindow -q -ic` ){\n\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\tbreak;\n\t\t}\n\t\t$progress = $i;\n\t\t$percentage = $progress * 100 / size($FTM_FileNodes);\n\t\tprogressWindow -e -pr $progress -st (\"Setting BOT options, please wait......      \" + $percentage + \"%\");\n\n\t\t// Do not handle sequence textures\n\t\tif (`getAttr ($FTM_FileNodes[$i] + \".useFrameExtension\")`) {\n\t\t\tFTM_Log \"\" \"\" \"Sequence specified, Skipped!\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tint $resolution = `intFieldGrp -q -v1 ($FTM_ExtraFunctionColumn + \"|FTM_BOTRow|FTM_BOTResFieldGrp\")`;\n\t\tfloat $xRes = `getAttr ($FTM_FileNodes[$i] + \".outSizeX\")`;\n\t\tfloat $yRes = `getAttr ($FTM_FileNodes[$i] + \".outSizeY\")`;\n\n\t\tif ($FTM_BOTMode) {// Setup\n\t\t\tif ($xRes >= $resolution || $yRes >= $resolution) {\n\t\t\t\tstring $FTM_File = `getAttr ($FTM_FileNodes[$i] + \".fileTextureName\")`;\n\t\t\t\t$FTM_File = `substituteAll \"\\\\\\\\\" $FTM_File \"/\"`;\n\t\t\t\tstring $FTM_TheBOT = `substitute \"(\\\\.bot)*$\" $FTM_File \"\"` + \".bot\";\n\t\t\t\tstring $BOTCmd = \"makebot -c  -r \" + $resolution + \" -i \\\"\" + $FTM_File + \"\\\" -o \\\"\" + $FTM_TheBOT + \"\\\"\";\n\t\t\t\tif (catchQuiet(eval($BOTCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"BOT file generation failed. Could be permission issue or the BOT file already exists.\";\n\t\t\t\tstring $cacheCmd = \"setAttr \" + $FTM_FileNodes[$i] + \".useCache 1\";\n\t\t\t\tstring $pathCmd = \"setAttr -typ \\\"string\\\" \" + $FTM_FileNodes[$i] + \".fileTextureName \\\"\" + $FTM_TheBOT + \"\\\"\";\n\t\t\t\tif (catchQuiet(eval($cacheCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"useCache\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\telse if (catchQuiet(eval($pathCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTextureName\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\telse\n\t\t\t\t\tFTM_Log \"\" \"\" \"BOT setup OK.\";\n\t\t\t}\n\t\t\telse\n\t\t\t\tFTM_Log \"\" \"\" (\"Resolution \\\"\" + $xRes + \"x\" + $yRes + \"\\\" is LOWER than specified threshold, skipped!\");\n\t\t}\n\t\telse {// Cancel\n\t\t\tif ($xRes <= $resolution && $yRes <= $resolution) {\n\t\t\t\tstring $cacheCmd = \"setAttr \" + $FTM_FileNodes[$i] + \".useCache 0\";\n\t\t\t\tstring $FTM_File = `getAttr ($FTM_FileNodes[$i] + \".fileTextureName\")`;\n\t\t\t\t$FTM_File = `substituteAll \"\\\\\\\\\" $FTM_File \"/\"`;\n\t\t\t\t$FTM_File = `substitute \"(\\\\.bot)*$\" $FTM_File \"\"`;\n\t\t\t\tstring $pathCmd = \"setAttr -typ \\\"string\\\" \" + $FTM_FileNodes[$i] + \".fileTextureName \\\"\" + $FTM_File + \"\\\"\";\n\t\t\t\tif (catchQuiet(eval($cacheCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"useCache\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\telse if (catchQuiet(eval($pathCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTexturename\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\telse\n\t\t\t\t\tFTM_Log \"\" \"\" \"BOT cancelled successfully.\";\n\t\t\t}\n\t\t\telse\n\t\t\t\tFTM_Log \"\" \"\" (\"Resolution \\\"\" + $xRes + \"x\" + $yRes + \"\\\" is HIGHER than specified threshold, skipped!\");\n\t\t}\n\t}\n\tprogressWindow -ep;\n\tFTM_Log \"end\" \"\" \"\";\n\tFTM_END;\n\twaitCursor -state off;\n}\n}\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n// Command for mentalray memory-mapped texture (.map) setup\n//\nglobal proc FTM_MAPSetup(int $FTM_MAPMode, string $FTM_ExtraFunctionColumn)\n//$FTM_MAPMode\t\t-\t1 Setup\n//\t\t\t\t\t-\t0 Unset\n{\nstring $FTM_FileNodes[]=`ls -sl -typ file`;\nif (`FTM_SelCheck $FTM_FileNodes`) {\n\twaitCursor -state on;\n\tFTM_Log \"start\" \"\" \"\";\n\tint $progress = 0;\n\tint $percentage = 0;\n\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size $FTM_FileNodes`;\n\n\tfor ($i=0; $i<size($FTM_FileNodes); $i++){\n\t\tFTM_Log \"\" ($FTM_FileNodes[$i]+\":\") \"\";\n\t\tif ( `progressWindow -q -ic` ){\n\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\tbreak;\n\t\t}\n\t\t$progress = $i;\n\t\t$percentage = $progress * 100 / size($FTM_FileNodes);\n\t\tprogressWindow -e -pr $progress -st (\"Setting up mentalray memory-mapped textures, please wait......      \" + $percentage + \"%\");\n\n\t\t// Do not handle sequence textures\n\t\tif (`getAttr ($FTM_FileNodes[$i] + \".useFrameExtension\")`) {\n\t\t\tFTM_Log \"\" \"\" \"Sequence specified, Skipped!\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tint $resolution = `intFieldGrp -q -v1 ($FTM_ExtraFunctionColumn + \"|FTM_MAPRow|FTM_MAPResFieldGrp\")`;\n\t\tfloat $xRes = `getAttr ($FTM_FileNodes[$i] + \".outSizeX\")`;\n\t\tfloat $yRes = `getAttr ($FTM_FileNodes[$i] + \".outSizeY\")`;\n\n\t\tif ($FTM_MAPMode) {// Setup\n\t\t\tif ($xRes >= $resolution || $yRes >= $resolution) {\n\t\t\t\tstring $FTM_File = `getAttr ($FTM_FileNodes[$i] + \".fileTextureName\")`;\n\t\t\t\t$FTM_File = `substituteAll \"\\\\\\\\\" $FTM_File \"/\"`;\n\t\t\t\tstring $FTM_TheMAP = `substitute \"(\\\\.map)*$\" $FTM_File \"\"` + \".map\";\n\t\t\t\tstring $MAPCmd = \"system(\\\"imf_copy -p -r \\\\\\\"\" + (encodeString(`toNativePath $FTM_File`)) + \"\\\\\\\" \\\\\\\"\" + (encodeString(`toNativePath $FTM_TheMAP`)) + \"\\\\\\\" map\\\")\";\n\t\t\t\tif (`file -q -ex $FTM_TheMAP`){ // .map is already there.\n\t\t\t\t\tFTM_Log \"\" \"\" (\"Mentalray memory-mapped texture file \\\"\" + `toNativePath $FTM_TheMAP` + \"\\\" already exists. FTM will directly use it.\");\n\t\t\t\t} else {\n\t\t\t\t\tif (catchQuiet(eval($MAPCmd)))\n\t\t\t\t\t\tFTM_Log \"\" \"\" \"Mentalray memory-mapped texture file generation failed. Could be permission issue or 'imf_copy' can not be found in system executable path.\";\n\t\t\t\t}\n\t\t\t\tstring $pathCmd = \"setAttr -typ \\\"string\\\" \" + $FTM_FileNodes[$i] + \".fileTextureName \\\"\" + $FTM_TheMAP + \"\\\"\";\n\t\t\t\tif (catchQuiet(eval($pathCmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTextureName\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\telse\n\t\t\t\t\tFTM_Log \"\" \"\" \"Mentalray memory-mapped texture setup accomplished.\";\n\t\t\t}\n\t\t\telse\n\t\t\t\tFTM_Log \"\" \"\" (\"Resolution \\\"\" + $xRes + \"x\" + $yRes + \"\\\" is LOWER than specified threshold, skipped!\");\n\t\t}\n\t\telse {// Unset\n\t\t\tif ($xRes <= $resolution && $yRes <= $resolution) {\n\t\t\t\tstring $FTM_File = `getAttr ($FTM_FileNodes[$i] + \".fileTextureName\")`;\n\t\t\t\t$FTM_File = `substituteAll \"\\\\\\\\\" $FTM_File \"/\"`;\n\t\t\t\tstring $FTM_TheMAP = $FTM_File;\n\t\t\t\t$FTM_File = `substitute \"(\\\\.map)*$\" $FTM_File \"\"`;\n\t\t\t\tint $wrong = 0;\n\t\t\t\tif (!`file -q -ex $FTM_File`){\n\t\t\t\t\tFTM_Log \"\" \"\" (\"Normal texture file \\\"\" + `toNativePath $FTM_File` + \"\\\" doesn't exist.\");\n\t\t\t\t\tFTM_Log \"\" \"\" (\"FTM is trying to extract one (in Maya iff format) from \\\"\" + `toNativePath $FTM_TheMAP` + \"\\\"\");\n\t\t\t\t\tstring $UnMAPCmd = \"system(\\\"imf_copy \\\\\\\"\" + (encodeString(`toNativePath $FTM_TheMAP`)) + \"\\\\\\\" \\\\\\\"\" + (encodeString(`toNativePath $FTM_File`)) + \"\\\\\\\" iff\\\")\";\n\t\t\t\t\tif (catchQuiet(eval($UnMAPCmd))) {\n\t\t\t\t\t\t$wrong = 1;\n\t\t\t\t\t\tFTM_Log \"\" \"\" (\"WARNING: Extracting normal texture file from \\\"\" + `toNativePath $FTM_TheMAP` + \"\\\" failed.\");\n\t\t\t\t\t\tFTM_Log \"\" \"\" \"         Could be permission issue, or 'imf_copy' can not be found in system executable path, or original .map file is not a mentalray memory-mapped texture file.\";\n\t\t\t\t\t} else\n\t\t\t\t\t\tFTM_Log \"\" \"\" (\"Extraction succeed. => \\\"\" + `toNativePath $FTM_File` + \"\\\"\");\n\t\t\t\t}\n\t\t\t\tif (!$wrong) {\n\t\t\t\t\tstring $pathCmd = \"setAttr -typ \\\"string\\\" \" + $FTM_FileNodes[$i] + \".fileTextureName \\\"\" + $FTM_File + \"\\\"\";\n\t\t\t\t\tif (catchQuiet(eval($pathCmd)))\n\t\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTexturename\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\t\telse\n\t\t\t\t\t\tFTM_Log \"\" \"\" \"Mentalray memory-mapped texture file unset accomplished.\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tFTM_Log \"\" \"\" (\"Resolution \\\"\" + $xRes + \"x\" + $yRes + \"\\\" is HIGHER than specified threshold, skipped!\");\n\t\t}\n\t}\n\tprogressWindow -ep;\n\tFTM_Log \"end\" \"\" \"\";\n\tFTM_END;\n\twaitCursor -state off;\n}\n}\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n// Command to substitute path root\n//\nglobal proc FTM_Substitute(string $oldRootField, string $newRootField)\n{\nstring $oldRoot = `textFieldButtonGrp -q -text $oldRootField`;\n$oldRoot = substituteAll(\"\\\\\\\\\",$oldRoot,\"/\");\nstring $newRoot = `textFieldButtonGrp -q -text $newRootField`;\n$newRoot = substituteAll(\"\\\\\\\\\",$newRoot,\"/\");\nif (size($oldRoot)==0 || size($newRoot)==0)\n\tconfirmDialog -t \"File Texture Manager\" -m \"Both the Old Root filed and the New Root field must be filled!\" -b \"OK\";\nelse {\n\tstring $fileNodes[] = `ls -sl -typ file  -typ psdFileTex`;\n\tif (`FTM_SelCheck $fileNodes`){\n\t\twaitCursor -state 1;\n\t\tFTM_Log \"start\" \"\" \"\";\n\t\t// substitute all special characters\n\t\tstring $badChar[] = {\"+\",\".\",\"^\",\"$\",\"[\",\"]\",\"(\",\")\"};\n\t\tfor ($char in $badChar)\n\t\t\t$oldRoot = `substituteAllString $oldRoot $char (\"\\\\\"+$char)`;\n\n\t\tstring $node;\n\n\t\tint $progress = 0;\n\t\tint $percentage = 0;\n\t\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size $fileNodes`;\n\n\t\tfor ($i=0;$i<size($fileNodes);$i++) {\n\t\t\tFTM_Log \"\" ($fileNodes[$i]+\":\") \"\";\n\t\t\tif ( `progressWindow -q -ic` ){\n\t\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$progress = $i;\n\t\t\t$percentage = $progress * 100 / size($fileNodes);\n\t\t\tprogressWindow -e -pr $progress -st (\"Redirecting, please wait......      \" + $percentage + \"%\");\n\n\t\t\tstring $old = `getAttr ($fileNodes[$i]+\".fileTextureName\")`;\n\t\t\t$old = `substituteAll \"\\\\\\\\\" $old \"/\"`;\n\t\t\tstring $new = `substitute $oldRoot $old $newRoot`;\n\t\t\tstring $cmd = \"setAttr -typ \\\"string\\\" \" + $fileNodes[$i] + \".fileTextureName \\\"\" + $new + \"\\\"\";\n\t\t\tif (catchQuiet(eval($cmd)))\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: Attribute \\\"fileTextureName\\\" is locked/connected and can NOT be modified!\";\n\t\t\telse\n\t\t\t\tFTM_Log \"\" \"\" (\"Set to \\\"\" + (toNativePath($new)) + \"\\\"\");\n\t\t\tif (!`file -q -ex $new`)\n\t\t\t\tFTM_Log \"\" \"\" (\"WARNING: \\\"\" + (toNativePath($new)) + \"\\\" doesn't exist!\");\n\t\t}\n\t\tprogressWindow -ep;\n\t\tFTM_Log \"end\" \"\" \"\";\n\t\tFTM_END;\n\t\twaitCursor -state 0;\n\t}\n}\n}\n\nglobal proc string getDirectoryFromTexCheck(string $checkLabel)\n{\n\ttextFieldButtonGrp -e -text ($checkLabel+\"/\") FTM_TargetDirectoryField;\n\treturn $checkLabel;\n\t}\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n// Command executed when \"分析场景文件纹理\" button pressed.\n//\nglobal proc FTM_AnalyseFileTextures (string $FTM_ParentUI)\n{\n\twaitCursor -state on;\n\n\tstring $FTM_Groups[] = `FTM_FileTextureAnalyst`;\n\n\t// Make sure the corresponding UI uniqe.\n\tif (`columnLayout -q -ex ($FTM_ParentUI + \"|FTM_AnalysisCheckerColumn\")`)\n\t\tdeleteUI ($FTM_ParentUI + \"|FTM_AnalysisCheckerColumn\");\n\n\tif (size($FTM_Groups) == 0)\n\t\ttext -e -l \"No file textures found!\" ($FTM_ParentUI + \"|FTM_EmptyAnalysisText\");\n\telse\n\t{\n\t\ttext -e -l \"Analysis:\" ($FTM_ParentUI + \"|FTM_EmptyAnalysisText\");\n\n\t\tsetParent $FTM_ParentUI;\n\t\tcolumnLayout FTM_AnalysisCheckerColumn;\n\t\tint $FTM_Groups_Size = size($FTM_Groups);\n\t\tif ($FTM_Groups[0] == \"FTM_EmptySocket_FTM\")\n\t\t\t$FTM_Groups_Size -= 1;\n\t\tif ($FTM_Groups[1] == \"FTM_MissingPathSocket_FTM\")\n\t\t\t$FTM_Groups_Size -= 1;\n\t\tglobal string $lsCmd;\n\t\tstring $FTM_TotalResults = \"Total \" + size(eval($lsCmd)) + \" file textures point to \" + $FTM_Groups_Size + \" (different) path(s) : \";\n\t\ttext -l $FTM_TotalResults;\n\t\ttext -l \"\" -h 10;\n\n\t\tFTM_Log \"start\" \"\" \"\";\n\t\t// Analyse each file in each \"group\".\n\t\tfor ($FTM_Group in $FTM_Groups)\n\t\t{\n\t\t\tstring $buffer[];\n\t\t\ttokenize $FTM_Group \"*\" $buffer;\n\t\t\tint $FTM_FilesStoredSize = size ($buffer)-1;\n\t\t\tstring $FTM_CurrentPath = $buffer[0];\n\t\t\t\n\t\t\tstring $FTM_FileTexturesAnalysis;\n\t\t\t// File texture not specified yet. In other words, empty file texture nodes.\n\t\t\tif ($FTM_CurrentPath==\"FTM_EmptySocket_FTM\" && $FTM_FilesStoredSize>0)\n\t\t\t\t$FTM_FileTexturesAnalysis = $FTM_FilesStoredSize + \" texture(s) NOT specified. So they are NOT exist(s).\";\n\t\t\t// File texture specified, but no path information.\n\t\t\telse if ($FTM_CurrentPath==\"FTM_MissingPathSocket_FTM\" && $FTM_FilesStoredSize>0)\n\t\t\t\t$FTM_FileTexturesAnalysis = $FTM_FilesStoredSize + \" texture(s) have no path information. So they are NOT exist(s).\";\n\t\t\t// Normal status.\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($FTM_FilesStoredSize>0){\n\t\t\t\t\t// Correct the path format for current OS.\n\t\t\t\t\t$FTM_CurrentPath = `FTM_GetPath \"path\" $FTM_CurrentPath`;\n\t\t\t\t\t$FTM_FileTexturesAnalysis = $FTM_FilesStoredSize + \" texture(s) point to \\\"\" + (toNativePath($FTM_CurrentPath)) + \"\\\"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Queue the names of the files stored in current \"group\" for later quick selecting.\n\t\t\tstring $FTM_CurrentFile[];\n\t\t\tstring $FTM_CurrentFiles = \"\";\n\t\t\t// Strings used to hold files exist or notExist.\n\t\t\tstring $FTM_Exist[] = {};\n\t\t\tint $FTM_ExistSize = 0;\n\t\t\tstring $FTM_NotExist[] = {};\n\t\t\tint $FTM_NotExistSize = 0;\n\n\t\t\tfor ($i=1; $i<size($buffer); $i++)\n\t\t\t{\n\t\t\t\t// Store the names of files in current \"group\".\n\t\t\t\t$FTM_CurrentFile[$i] = $buffer[$i];\n\t\t\t\t$FTM_CurrentFiles = $FTM_CurrentFiles + $FTM_CurrentFile[$i] + \" \";\n\n\t\t\t\t// Check if the file exsist or not, then asign the name to responding variable.\n\t\t\t\tstring $FTM_CurrentFilePath = `getAttr ($FTM_CurrentFile[$i] + \".fileTextureName\")`;\n\t\t\t\tif ( `file -q -ex $FTM_CurrentFilePath`)\n\t\t\t\t{\n\t\t\t\t\t$FTM_Exist[$FTM_ExistSize] = $FTM_CurrentFile[$i];\n\t\t\t\t\t$FTM_ExistSize = $FTM_ExistSize + 1;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$FTM_NotExist[$FTM_NotExistSize] = $FTM_CurrentFile[$i];\n\t\t\t\t\t$FTM_NotExistSize = $FTM_NotExistSize + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (size($FTM_FileTexturesAnalysis)) {\n\t\t\t\t\tstring $FTM_MainChecker = `checkBox -l $FTM_FileTexturesAnalysis -al left`;\n\t\t\t\t\tpopupMenu -p $FTM_MainChecker;\n\t\t\t\t\tstring $cmd = \"getDirectoryFromTexCheck(\\\"\"+$buffer[0]+\"\\\")\";\n\t\t\t\t\t\n\t\t\t\t\tmenuItem -label \"copy\" -c $cmd;\n\t\t\t\t\tFTM_Log \"\" \"\" $FTM_FileTexturesAnalysis;\n\n\t\t\t\t// Only build responding sub-checker for the files have path information.\n\t\t\t\tstring $FTM_ExistSubChecker;\n\t\t\t\tstring $FTM_NotExistSubChecker;\n\t\t\t\tif ($FTM_CurrentPath!=\"FTM_EmptySocket_FTM\"  && $FTM_CurrentPath!=\"FTM_MissingPathSocket_FTM\")\n\t\t\t\t{\n\t\t\t\t\tcolumnLayout -adj 1 -cat left 30;\n\t\t\t\t\t\t// A list of exist files, which is used for selection.\n\t\t\t\t\t\tstring $FTM_ExistFiles = \"\";\n\t\t\t\t\t\tfor ($i=0; $i<$FTM_ExistSize; $i++)\n\t\t\t\t\t\t\t$FTM_ExistFiles = $FTM_ExistFiles + $FTM_Exist[$i] + \" \";\n\t\t\t\t\t\t$FTM_ExistSubChecker = `checkBox -l ($FTM_ExistSize + \" of them exist(s).\") -al left\n\t\t\t\t\t\t\t-onc (\"select -add \" + $FTM_ExistFiles) -ofc (\"if (\" + $FTM_ExistSize + \" > 0) select -deselect \" + $FTM_ExistFiles)`;\n\n\t\t\t\t\t\t// A list of NOT exist files, which is used for selection.\n\t\t\t\t\t\tstring $FTM_NotExistFiles = \"\";\n\t\t\t\t\t\tfor ($i=0; $i<$FTM_NotExistSize; $i++)\n\t\t\t\t\t\t\t$FTM_NotExistFiles = $FTM_NotExistFiles + $FTM_NotExist[$i] + \" \";\n\t\t\t\t\t\t$FTM_NotExistSubChecker = `checkBox -l ($FTM_NotExistSize + \" of them NOT exist(s).\") -al left\n\t\t\t\t\t\t\t-onc (\"select -add \" + $FTM_NotExistFiles) -ofc (\"if (\" + $FTM_NotExistSize + \" > 0) select -deselect \" + $FTM_NotExistFiles)`;\n\t\t\t\t\tsetParent ($FTM_ParentUI + \"|FTM_AnalysisCheckerColumn\");\n\n\t\t\t\t\t// Main checker's onCommand and offCommand should influnce responding subcheckers in this case;\n\t\t\t\t\tcheckBox -e -onc (\"select -add \" + $FTM_CurrentFiles + \";checkBox -e -v 1 -vis 0 \" + $FTM_ExistSubChecker + \";checkBox -e -v 1 -vis 0 \" + $FTM_NotExistSubChecker)\n\t\t\t\t\t\t-ofc (\"if (\" + $FTM_FilesStoredSize + \" > 0) select -deselect \" + $FTM_CurrentFiles + \";checkBox -e -v 0 -vis 1 \" + $FTM_ExistSubChecker + \";checkBox -e -v 0 -vis 1 \" + $FTM_NotExistSubChecker)\n\t\t\t\t\t\t$FTM_MainChecker;\n\t\t\t\t}\n\t\t\t\t// Main checker's onCommand and offCommand should NOT influnce responding subcheckers in this case;\n\t\t\t\telse\n\t\t\t\t\tcheckBox -e -onc (\"select -add \" + $FTM_CurrentFiles) -ofc (\"if (\" + $FTM_FilesStoredSize + \" > 0) select -deselect \" + $FTM_CurrentFiles) $FTM_MainChecker;\n\t\t\t}\n\t\t}\n\tFTM_Log \"end\" \"\" \"\";\n\t}\n\n\twaitCursor -state off;\n}\n\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n//\n//Comand executed when Browse button pressed.\n//\nglobal proc FTM_BrowseCmd (string $FTM_FileOrPath, string $FTM_TextField, string $FTM_WhichButton, int $FTM_BrowseType)\n//$FTM_FileOrPath\t\tPass to FTM_ChangeTextField\n//$FTM_TextField\t\tPass to FTM_ChangeTextField\n//$FTM_WhichButton\t\tPass to fileBrowser, which will be the label of the dialog\n//$FTM_BrowseType\t\tPass to fileBrowser, which will define to get dialog for file or folder\n{\n\tglobal string $FTM_WorkSpace;\n\tif (size($FTM_WorkSpace) == 0)\n\t{\n\t\t$FTM_WorkSpace = `workspace -q -rd` + `workspace -q -rte \"sourceImages\"`;\n\t\t$FTM_WorkSpace = `FTM_GetPath \"path\" $FTM_WorkSpace`;\n\t}\n\tworkspace -dir $FTM_WorkSpace;\n\n\tglobal int $FTM_NEW_MAYA;\n\tif ($FTM_NEW_MAYA) { // use 'fileDialog2' for the browser command.\n\t\tif ($FTM_BrowseType == 0) $FTM_BrowseType = 1;\n\t\telse if ($FTM_BrowseType == 4) $FTM_BrowseType = 3;\n\t\tstring $return[] = `fileDialog2 -ds 2 -cap $FTM_WhichButton -dir $FTM_WorkSpace -fm $FTM_BrowseType -okc $FTM_WhichButton -cc \"Cancel\"`;\n\t\tstring $path = $return[0];\n\t\tif (!size($path)) $path = `textFieldButtonGrp -q -text $FTM_TextField`;\n\t\tif ($FTM_FileOrPath == \"file\") $path += \"bugQuickFix\";\n\t\tFTM_ChangeTextField $FTM_FileOrPath $FTM_TextField $path \"\";\n\t}\n\telse {\n\t\tstring $FTM_Temp = \"\";\n\t\t\t$FTM_Temp += \"FTM_ChangeTextField \";\n\t\t\t$FTM_Temp += (\"\\\"\" + $FTM_FileOrPath + \"\\\" \");\n\t\t\t$FTM_Temp += (\"\\\"\" + $FTM_TextField + \"\\\" \");\n\t\tfileBrowser $FTM_Temp $FTM_WhichButton \"\" $FTM_BrowseType;\n\t}\n}\n\n///////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////\n//\n//The callback command on fileBrowser.\n//\nglobal proc FTM_ChangeTextField (string $FTM_FileOrPath, string $FTM_TextField, string $FTM_File, string $FTM_FileType)\n//$FTM_FileOrPath\tHow to deal with the input path , will be pass to FTM_GetPath\n//$FTM_TextField\tThe name of the control need to be edited\n//$FTM_File\t\t\tThe file specified\n//$FTM_FileType\t\tThe file type specified\n{\n\tstring $FTM_Path = `FTM_GetPath $FTM_FileOrPath $FTM_File`;\n\ttextFieldButtonGrp -e -text (toNativePath($FTM_Path)) $FTM_TextField;\n\t//Close the dialog for IRIX/Linux.\n\tstring $os = `about -os`;\n\tif (gmatch($os, \"*irix*\") || gmatch($os, \"*linux*\"))\n\t\twindow -e -vis false projectViewerWindow;\n\n\tglobal string $FTM_WorkSpace;\n\t$FTM_WorkSpace = $FTM_Path;\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n// Reset the UI to its initial state.\n//\nglobal proc FTM_ResetUI (string $FTM_OptionColumn,string $FTM_AnalysisColumn,string $FTM_ExtraFunctionColumn,string $FTM_Tabs,string $FTM_CopyButton,string $FTM_MoveButton,string $FTM_SetButton)\n{\n\twaitCursor -state on;\n\n\t// The main window;\n\tglobal int $FTM_WIDTH, $FTM_HEIGHT;\n\twindow -e -wh $FTM_WIDTH $FTM_HEIGHT FTM_MainWindow;\n\n\t// Analyse area\n\ttext -e -l \"Not analysed yet.\" ($FTM_AnalysisColumn + \"|FTM_EmptyAnalysisText\");\n\n\tif (`columnLayout -q -ex ($FTM_AnalysisColumn + \"|FTM_AnalysisCheckerColumn\")`)\n\t\tdeleteUI ($FTM_AnalysisColumn + \"|FTM_AnalysisCheckerColumn\");\n\n\t// Operation mode\n\tradioButtonGrp -e -select 1 ($FTM_OptionColumn + \"|FTM_OperationMode\");\n\t// Source directory field\n\ttextFieldButtonGrp -e -text \"\" -en 0 ($FTM_OptionColumn + \"|FTM_SourceDirectoryField\");\n\t// Target directory field\n\tstring $FTM_CurrentProject = `workspace -q -rd`;\n\tstring $FTM_CurrentSourceImagesDir = $FTM_CurrentProject + `workspace -q -rte \"sourceImages\"`;\n\tstring $FTM_SourceImages = `FTM_GetPath \"path\" $FTM_CurrentSourceImagesDir`;\n\ttextFieldButtonGrp -e -text $FTM_SourceImages ($FTM_OptionColumn + \"|FTM_TargetDirectoryField\");\n\t// Make new folder area\n\tcheckBoxGrp -e -v1 0 ($FTM_OptionColumn + \"|FTM_MakeFolderChecker\");\n\ttextFieldGrp -e -text \"MyTextureFiles\" -en 0 ($FTM_OptionColumn + \"|FTM_NewFolderNameField\");\n\t// Add prefix area\n\tcheckBox -e -v 0 ($FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_AddPrefixChecker\");\n\ttextField -e -text \"prefix_\" -en 0 ($FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_PrefixField\");\n\t// Add suffix area\n\tcheckBox -e -v 0 ($FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_AddSuffixChecker\");\n\ttextField -e -text \"_suffix\" -en 0 ($FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_SuffixField\");\n\t// Replace string area\n\tcheckBoxGrp -e -v1 0 ($FTM_OptionColumn + \"|FTM_ReplaceStringChecker\");\n\ttextFieldGrp -e -text \"OldString\" -en 0 ($FTM_OptionColumn + \"|FTM_OldStringField\");\n\ttextFieldGrp -e -text \"NewString\" -en 0 ($FTM_OptionColumn + \"|FTM_NewStringField\");\n\n\t// Extra function tab\n\ttextFieldButtonGrp -e -text \"\" ($FTM_ExtraFunctionColumn + \"|oldRootField\");\n\tstring $tmp = `workspace -q -rd` + `workspace -q -rte \"sourceImages\"`;\n\t$tmp = `FTM_GetPath \"path\" $tmp`;\n\ttextFieldButtonGrp -e -text $tmp ($FTM_ExtraFunctionColumn + \"|newRootField\");\n\tintFieldGrp -e -v1 1024 ($FTM_ExtraFunctionColumn + \"|FTM_BOTRow|FTM_BOTResFieldGrp\");\n\tintFieldGrp -e -v1 1024 ($FTM_ExtraFunctionColumn + \"|FTM_MAPRow|FTM_MAPResFieldGrp\");\n\toptionMenu -e -v \"Mipmap\" ($FTM_ExtraFunctionColumn + \"|FTM_FilterTypeRow|FTM_FilterTypeMenu\");\n\toptionMenu -e -v \"\\*\" ($FTM_ExtraFunctionColumn + \"|FTM_FCRow|FTM_FCSourceMenu\");\n\toptionMenu -e -v \"iff\" ($FTM_ExtraFunctionColumn + \"|FTM_FCRow|FTM_FCTargetMenu\");\n\tcheckBox -e -v 0 ($FTM_ExtraFunctionColumn + \"|FTM_SeqCheck\");\n\tcheckBox -e -v 1 ($FTM_ExtraFunctionColumn + \"|FTM_UpdateCheck\");\n\tcheckBox -e -v 0 -en 1 ($FTM_ExtraFunctionColumn + \"|FTM_RemoveCheck\");\n\n\t// Return to the first tab\n\ttabLayout -e -sti 1 $FTM_Tabs;\n\n\t// Reset all bottom function buttons\n\tbutton -e -en 1 $FTM_CopyButton;\n\tbutton -e -en 1 $FTM_MoveButton;\n\tbutton -e -en 1 $FTM_SetButton;\n\n\tglobal string $FTM_WorkSpace;\n\t$FTM_WorkSpace = `workspace -q -rd` + `workspace -q -rte \"sourceImages\"`;\n\t$FTM_WorkSpace = `FTM_GetPath \"path\" $FTM_WorkSpace`;\n\n\tselect -cl;\n\twaitCursor -state off;\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////\n//\n// The Copy, Move and Set functions.\n//\nglobal proc FTM_Function (string $FTM_Function, string $FTM_OptionColumn)\n{\n\tglobal string $lsCmd;\n\tstring $FTM_SelectedFiles[] = eval($lsCmd + \" -sl\");\n\tif (`FTM_SelCheck $FTM_SelectedFiles`)\n\t{\n\t\twaitCursor -state on;\n\t\tFTM_Log \"start\" \"\" \"\";\n\t\tint $wrong = 0;\n\t\t// First get elements ready.\n\t\tint $FTM_OperationMode = `radioButtonGrp -q -select ($FTM_OptionColumn + \"|FTM_OperationMode\")`;\n\n\t\t// Source directory.\n\t\tstring $FTM_SourceDirectory;\n\n\t\t// Target directory.\n\t\tstring $FTM_TargetDirectory = `textFieldButtonGrp -q -text ($FTM_OptionColumn + \"|FTM_TargetDirectoryField\")`;\n\t\t$FTM_TargetDirectory = `FTM_GetPath \"path\" $FTM_TargetDirectory`;\n\t\t// Check if new folder needed. If needed, create one only when the folder does not exist.\n\t\tif ( `checkBoxGrp -q -v1 ($FTM_OptionColumn + \"|FTM_MakeFolderChecker\")` )\n\t\t{\n\t\t\tstring $FTM_NewFolderName = `textFieldGrp -q -text ($FTM_OptionColumn + \"|FTM_NewFolderNameField\")`;\n\t\t\t$FTM_TargetDirectory = $FTM_TargetDirectory + $FTM_NewFolderName;\n\t\t\tif (!`file -q -ex $FTM_TargetDirectory`) {\n\t\t\t\tif (`sysFile -md $FTM_TargetDirectory`)\n\t\t\t\t\tFTM_Log \"\" (\"Folder created: \\\"\" + (toNativePath($FTM_TargetDirectory)) + \"\\\".\") \"\";\n\t\t\t\telse {\n\t\t\t\t\t$wrong = 1;\n\t\t\t\t\tFTM_Log \"\" (\"Folder can not be created: \" + (toNativePath($FTM_TargetDirectory)) + \"\\\".\") \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!`filetest -w $FTM_TargetDirectory`) {\n\t\t\t\t\t$wrong = 1;\n\t\t\t\t\tFTM_Log \"\" (\"Folder exists but is not writeable: \" + (toNativePath($FTM_TargetDirectory)) + \"\\\".\") \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$FTM_TargetDirectory = `FTM_GetPath \"path\" $FTM_TargetDirectory`;\n\t\t}\n\n\t\tif (!$wrong) {\n\t\t\t// Define command for function.\n\t\t\tstring $FTM_FunctionCmd;\n\t\t\tif ($FTM_Function == \"Copy\")\n\t\t\t\t$FTM_FunctionCmd = \"sysFile -cp \";\n\t\t\telse if ($FTM_Function == \"Move\")\n\t\t\t\t$FTM_FunctionCmd = \"sysFile -mov \";\n\n\t\t\t// base of progress feedback setup\n\t\t\tint $progress = 0;\n\t\t\tint $percentage = 0;\n\t\t\tprogressWindow -t \"FTM Working...\" -pr $progress -ii 1 -min 0 -max `size $FTM_SelectedFiles`;\n\n\t\t\t// Execute command of current function for every file texture node selected.\n\t\t\tfor ($FTM_SelectedFile in $FTM_SelectedFiles)\n\t\t\t{\n\t\t\t\tFTM_Log \"\" ($FTM_SelectedFile+\":\") \"\";\n\t\t\t\tif ( `progressWindow -q -ic` ){\n\t\t\t\t\tFTM_Log \"\" \"User cancelled.\" \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$wrong = 0;\n\t\t\t\t// Check if the dialog has been cancelled\n\t\t\t\t\t\t\t\t$progress += 1;\n\t\t\t\t$percentage = $progress * (100/size($FTM_SelectedFiles));\n\t\t\t\tprogressWindow -e -pr $progress -st (\"Handling \" + $FTM_SelectedFile + \"     ......  \" + $percentage + \"%\");\n\n\t\t\t\t// start to work\n\t\t\t\tstring $FTM_CurrentFile = `getAttr ($FTM_SelectedFile + \".fileTextureName\")`;\n\t\t\t\tstring $FTM_SourceFile[] = `FTM_GetFile $FTM_CurrentFile`;\n\t\t\t\tstring $FTM_OriginSourceFile = $FTM_SourceFile[1];\n\n\t\t\t\t// The file texture is not specified.\n\t\t\t\tif (size($FTM_OriginSourceFile) == 0)\n\t\t\t\t\tFTM_Log \"\" \"\" \"WARNING: File texture is not specified.\";\n\t\t\t\t// The file texture is specified.\n\t\t\t\telse\n\t\t\t\t{\n\n\t\t\t\t\t// If replace string was selected, replace the string specified.\n\t\t\t\t\tif ( `checkBoxGrp -q -v1 ($FTM_OptionColumn + \"|FTM_ReplaceStringChecker\")` )\n\t\t\t\t\t{\n\t\t\t\t\t\tstring $FTM_OldString = `textFieldGrp -q -tx ($FTM_OptionColumn + \"|FTM_OldStringField\")`;\n\t\t\t\t\t\tstring $badChar[] = {\"+\",\".\",\"^\",\"$\",\"[\",\"]\",\"(\",\")\"};\n\t\t\t\t\t\t\tfor ($char in $badChar)\n\t\t\t\t\t\t\t\t$FTM_OldString = `substituteAllString $FTM_OldString $char (\"\\\\\"+$char)`;\n\t\t\t\t\t\tstring $FTM_MatchExpression = \"(\" + $FTM_OldString + \")+\";\n\t\t\t\t\t\tstring $FTM_NewString = `textFieldGrp -q -tx ($FTM_OptionColumn + \"|FTM_NewStringField\")`;\n\t\t\t\t\t\tfor ($i=0; $i<size($FTM_SourceFile[1]); $i++)\n\t\t\t\t\t\t\t$FTM_SourceFile[1] = `substitute $FTM_MatchExpression $FTM_SourceFile[1] $FTM_NewString`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add prefix or(and) append suffix.\n\t\t\t\t\tstring $FTM_Prefix;\n\t\t\t\t\tstring $FTM_Suffix;\n\t\t\t\t\tstring $FTM_SourceFileRegularName[] = `FTM_FCFileRegularName $FTM_SourceFile[1]`;\n\t\t\t\t\t// If prefix was set, add it to the file name.\n\t\t\t\t\tif ( `checkBox -q -v ($FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_AddPrefixChecker\")` )\n\t\t\t\t\t\t$FTM_Prefix = `textField -q -tx ($FTM_OptionColumn + \"|FTM_AddPrefixRow|FTM_PrefixField\")`;\n\t\t\t\t\t// If suffix was set, append it to the file name.\n\t\t\t\t\tif ( `checkBox -q -v ($FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_AddSuffixChecker\")` )\n\t\t\t\t\t\t$FTM_Suffix = `textField -q -tx ($FTM_OptionColumn + \"|FTM_AddSuffixRow|FTM_SuffixField\")`;\n\n\t\t\t\t\t// Assemble the filename\n\t\t\t\t\tif (size($FTM_SourceFileRegularName[1]))\n\t\t\t\t\t\t$FTM_SourceFileRegularName[1] = \".\" + $FTM_SourceFileRegularName[1];\n\t\t\t\t\tif (size($FTM_SourceFileRegularName[2]))\n\t\t\t\t\t\t$FTM_SourceFileRegularName[2] = \".\" + $FTM_SourceFileRegularName[2];\n\t\t\t\t\t$FTM_SourceFile[1] = $FTM_Prefix + $FTM_SourceFileRegularName[0] + $FTM_Suffix + $FTM_SourceFileRegularName[1] + $FTM_SourceFileRegularName[2];\n\n\t\t\t\t\t// Function process.\n\t\t\t\t\tstring $FTM_FinalCmd;\n\t\t\t\t\tstring $FTM_FunctionResult;\n\t\t\t\t\tint $setWrong = 0;\n\t\t\t\t\tif ($FTM_Function != \"Set\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($FTM_OperationMode == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$FTM_FinalCmd = $FTM_FunctionCmd + \"\\\"\" + `substituteAll \"\\\\\\\\\" ($FTM_TargetDirectory + $FTM_SourceFile[1]) \"/\"` + \"\\\" \\\"\" + `substituteAll \"\\\\\\\\\" $FTM_SourceFile[0] \"/\"` + \"\\\"\";\n\t\t\t\t\t\t\t$FTM_FunctionResult = $FTM_Function + \" \\\"\" + `toNativePath $FTM_SourceFile[0]` + \"\\\" to \\\"\" + `toNativePath ($FTM_TargetDirectory + $FTM_SourceFile[1])` + \"\\\". \";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ($FTM_OperationMode == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$FTM_SourceDirectory = `textFieldButtonGrp -q -text ($FTM_OptionColumn + \"|FTM_SourceDirectoryField\")`;\n\t\t\t\t\t\t\t$FTM_SourceDirectory = `FTM_GetPath \"path\" $FTM_SourceDirectory`;\n\t\t\t\t\t\t\t$FTM_FinalCmd = $FTM_FunctionCmd + \"\\\"\" + `substituteAll \"\\\\\\\\\" ($FTM_TargetDirectory + $FTM_SourceFile[1]) \"/\"` + \"\\\" \\\"\" + `substituteAll \"\\\\\\\\\" ($FTM_SourceDirectory + $FTM_OriginSourceFile) \"/\"` + \"\\\"\";\n\t\t\t\t\t\t\t$FTM_FunctionResult = $FTM_Function + \" \\\"\" + `toNativePath ($FTM_SourceDirectory + $FTM_OriginSourceFile)` + \"\\\" to \\\"\" + `toNativePath ($FTM_TargetDirectory + $FTM_SourceFile[1])` + \"\\\". \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ($FTM_Function == \"Set\")\n\t\t\t\t\t{\n\t\t\t\t\t\tstring $path = `substituteAll \"\\\\\\\\\" ($FTM_TargetDirectory + $FTM_SourceFile[1]) \"/\"`;\n\t\t\t\t\t\tstring $cmd = \"setAttr -typ \\\"string\\\" \" + $FTM_SelectedFile + \".fileTextureName \\\"\" + $path + \"\\\"\";\n\t\t\t\t\t\tif (catchQuiet(eval($cmd))) {\n\t\t\t\t\t\t\t$FTM_FunctionResult = \"Attribute \\\"fileTextureName\\\" is locked/connected and can NOT be modified!\";\n\t\t\t\t\t\t\t$setWrong = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t$FTM_FunctionResult = \"Set to \\\"\" + `toNativePath ($FTM_TargetDirectory + $FTM_SourceFile[1])` + \"\\\". \";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do the function.\n\t\t\t\t\tif ($FTM_Function != \"Set\") {\n\t\t\t\t\t\tif (!eval($FTM_FinalCmd)) {\n\t\t\t\t\t\t\t$wrong = 1;\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"WARNING: \" + $FTM_Function + \" can NOT be done, could be permission issue or path existence issue.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$wrong) {\n\t\t\t\t\t\t// Print the function result.\n\t\t\t\t\t\tif ( `file -q -ex ($FTM_TargetDirectory + $FTM_SourceFile[1])` )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($FTM_Function == \"Move\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// File copied but not removed -- not actually \"move\".\n\t\t\t\t\t\t\t\tif ( `file -q -ex $FTM_SourceFile[0]` || `file -q -ex ($FTM_SourceDirectory + $FTM_OriginSourceFile)`)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"Succeed: \" + $FTM_FunctionResult + \" But the original file is not removed. Check the HELP for possible reasons.\";\n\t\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" (\"WARNING: \" + $FTM_FunctionResult);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"Succeed: \" + $FTM_FunctionResult;\n\t\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" $FTM_FunctionResult;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"Succeed: \" + $FTM_FunctionResult;\n\t\t\t\t\t\t\t\tFTM_Log \"\" \"\" $FTM_FunctionResult;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($FTM_Function == \"Set\") {\n\t\t\t\t\t\t\t\tif ($setWrong)\n\t\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"WARNING: \" + $FTM_FunctionResult;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"Succeed: \" + $FTM_FunctionResult + \"But destination does NOT exist.\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($FTM_Function != \"Set\")\n\t\t\t\t\t\t\t\t$FTM_FunctionResult = \"Fail: \" + $FTM_FunctionResult + \"Check Help tab for possible reasons.\";\n\t\t\t\t\t\t\tFTM_Log \"\" \"\" $FTM_FunctionResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// finish progress feed back\n\t\tprogressWindow -ep;\n\t\t// job done\n\t\tFTM_Log \"end\" \"\" \"\";\n\t\tFTM_END;\n\t\twaitCursor -state off;\n\t}\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n//\n//Build the main UI.\n//\nglobal proc FileTextureManager ()\n{\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n//\n// Version Check\n//\nfloat $verCut = 2010;\nglobal int $FTM_NEW_MAYA, $FTM_WIDTH, $FTM_HEIGHT;\n$FTM_NEW_MAYA = 0;\n$FTM_WIDTH = 380;\n$FTM_HEIGHT = 600;\n\nstring $verString = `about -v`;\nstring $verString_tmp[];\ntokenize $verString \" \" $verString_tmp;\nfloat $verNum = $verString_tmp[0];\nif ($verNum > $verCut) { // version newer than 2010\n\tglobal int $FTM_NEW_MAYA, $FTM_WIDTH, $FTM_HEIGHT;\n\t$FTM_NEW_MAYA = 1;\n\t$FTM_WIDTH = 520;\n\t$FTM_HEIGHT = 700;\n}\n// array of formats supported by format conversion function\nglobal string $FTM_FCAllFormats[];\n$FTM_FCAllFormats = {\"iff\",\"sgi\",\"tga\",\"rgb\",\"jpg\",\"jpeg\",\"map\",\"tif\",\"tiff\",\"bmp\",\"bw\",\"icon\",\"cin\",\"pic\",\"yuv\",\"als\",\"gif\",\"lff\",\"pxb\",\"scn\",\"ppm\",\"pri\",\"qtl\",\"vst\",\"rla\"};\n\n// cover all file texture nodes including mentalray's\nglobal string $lsCmd;\n$lsCmd = \"ls -typ file -typ psdFileTex \";\n\nselect -cl;\n\nglobal string $FTM_MayaWorkSpace;\n$FTM_MayaWorkSpace = `workspace -q -dir`;\nglobal string $FTM_WorkSpace = \"\";\n\n//Make sure the window will be displayed in proper size.\nwindowPref -enableAll false;\n//If the UI exits , delete it.\nif (`window -exists FTM_MainWindow`)\n\tdeleteUI FTM_MainWindow;\n//Build a new UI.\nglobal int $FTM_WIDTH, $FTM_HEIGHT;\nwindow -title \"File Texture Manager\" -wh $FTM_WIDTH $FTM_HEIGHT -tlc 200 200 -ret FTM_MainWindow;\n\tstring $FTM_MainForm = `formLayout`;\n\t\tstring $FTM_Tabs = `tabLayout -imw 0 -imh 0`;\n//Option tab\n\t\tstring $FTM_OptionForm = `formLayout`;\n\t\t\tstring $FTM_OptionScroll = `scrollLayout -cr true`;\n\t\t\tstring $FTM_OptionColumn = `columnLayout -adj 1 -rs 5`;\n//Analyse area\n\t\t\t\tformLayout -nd 100 FTM_AnalyseForm;\n\t\t\t\t\t\tstring $FTM_AnalyseColumn = `columnLayout -cat both 30 -adj 1 -rs 5`;\n\t\t\t\t\t\t\tbutton -l \"分析场景文件纹理\" -h 30 -w 250 FTM_AnalyseButton;\n\t\t\t\t\t\t\ttext -l \"\" -h 5;\n\t\t\t\t\t\t\ttext -l \"Select files you want to manage. <Multi-Selectable>\";\n\t\t\t\t\t\tstring $FTM_AnalysisScroll = `scrollLayout -p FTM_AnalyseForm`;\n\t\t\t\t\t\t\tstring $FTM_AnalysisColumn = `columnLayout -cat left 15`;\n\t\t\t\t\t\t\t\ttext -l \"Not analysed yet.\" FTM_EmptyAnalysisText;\n\t\t\t\t\t\t\tbutton -e -c (\"FTM_AnalyseFileTextures \" + $FTM_AnalysisColumn) ($FTM_AnalyseColumn + \"|FTM_AnalyseButton\");\n\t\t\t\tformLayout -e\n\t\t\t\t\t-af $FTM_AnalyseColumn left 0\n\t\t\t\t\t-af $FTM_AnalyseColumn right 0\n\t\t\t\t\t-af $FTM_AnalyseColumn top 5\n\t\t\t\t\t-af $FTM_AnalyseColumn bottom 200\n\t\t\t\t\t-ac $FTM_AnalysisScroll top 5 $FTM_AnalyseColumn\n\t\t\t\t\t-af $FTM_AnalysisScroll bottom 0\n\t\t\t\t\t-af $FTM_AnalysisScroll left 0\n\t\t\t\t\t-af $FTM_AnalysisScroll right 0\n\t\t\t\t\t($FTM_OptionColumn + \"|FTM_AnalyseForm\");\n\t\t\tsetParent $FTM_OptionColumn;\n\t\t\t\tseparator -style \"in\" -h 10;\n//Operation mode\n\t\t\t\tradioButtonGrp -l \"Operation Mode\" -la2 \"Automatic\" \"Manual\" -nrb 2 -select 1 -cl3 right left left -cw3 120 100 100 FTM_OperationMode;\n\n\t\t\t\tseparator -style \"in\" -h 5;\n\n//Set source directory area\n\t\t\t\ttextFieldButtonGrp -label \"Source Directory\" -text \"\" -buttonLabel \"Browse...\" -adj 2 -en 0 -cw 1 120 -cw 3 60 -cl3 right left center FTM_SourceDirectoryField;\n\n\t\t\t\tseparator -style \"in\" -h 5;\n\n//Set target directory area\n\t\t\t\tstring $FTM_CurrentProject = `workspace -q -rd`;\n\t\t\t\tstring $FTM_CurrentSourceImagesDir = $FTM_CurrentProject + `workspace -q -fileRuleEntry \"sourceImages\"`;\n\t\t\t\tstring $FTM_SourceImages = `FTM_GetPath \"path\" $FTM_CurrentSourceImagesDir`;\n\t\t\t\ttextFieldButtonGrp -label \"Target Directory\" -text $FTM_SourceImages -buttonLabel \"Browse...\" -adj 2 -cw 1 120 -cw 3 60 -cl3 right left center FTM_TargetDirectoryField;\n//Create new folder area\n\t\t\t\tcheckBoxGrp -ncb 1 -l1 \"Make New Folder Under Target Directory\" -adj 1 -v1 0 -cat 1 left 101 FTM_MakeFolderChecker;\n\t\t\t\ttextFieldGrp -label \"Folder Name\" -text \"MyTextureFiles\" -en 0 -cw2 120 180 -cl2 right left FTM_NewFolderNameField;\n\t\t\t\ttext -al center -l \"The FINAL target directory will be equal to target directory\";\n\t\t\t\ttext -al center -l \"plus the new folder if user decide to make a new folder\";\n\t\t\t\tseparator -style \"in\" -h 5;\n//Update texture file area\n\t\t\t\trowLayout -nc 2 -cw 1 120 -cat 1 right 0 -cl2 left left FTM_AddPrefixRow;\n\t\t\t\t\tcheckBox -l \"Add Prefix\" -v 0 FTM_AddPrefixChecker;\n\t\t\t\t\ttextField -tx \"prefix_\" -en 0 -w 150 FTM_PrefixField;\n\t\t\tsetParent $FTM_OptionColumn;\n\t\t\t\trowLayout -nc 2 -cw 1 120 -cat 1 right 0 -cl2 left left FTM_AddSuffixRow;\n\t\t\t\t\tcheckBox -l \"Add Suffix\" -v 0 FTM_AddSuffixChecker;\n\t\t\t\t\ttextField -tx \"_suffix\" -en 0 -w 150 FTM_SuffixField;\n\t\t\tsetParent $FTM_OptionColumn;\n\t\t\t\tcheckBoxGrp -ncb 1 -l1 \"Replace String\" -adj 1 -v1 0 -cat 1 left 101 FTM_ReplaceStringChecker;\n\t\t\t\ttextFieldGrp -l \"Old String\" -tx \"OldString\" -en 0 -cw2 120 150 -cl2 right left FTM_OldStringField;\n\t\t\t\ttextFieldGrp -l \"New String\" -tx \"NewString\" -en 0 -cw2 120 150 -cl2 right left FTM_NewStringField;\n\t\tformLayout -e\n\t\t\t-af $FTM_OptionScroll top 5\n\t\t\t-af $FTM_OptionScroll left 0\n\t\t\t-af $FTM_OptionScroll right 0\n\t\t\t-af $FTM_OptionScroll bottom 0\n\t\t\t$FTM_OptionForm;\n\t\tsetParent $FTM_Tabs;\n//Extra function tab\n\t\t\tstring $FTM_ExtraFunctionScroll = `scrollLayout -cr true`;\n\t\t\tstring $FTM_ExtraFunctionColumn = `columnLayout -cat both 15 -adj 1 -rs 5`;\n\t\t\t\t// Substitute path root area\n\t\t\t\tseparator -style \"none\" -h 5;\n\t\t\t\ttext -fn \"boldLabelFont\" -al left -l \"Substitute path root\";\n\t\t\t\ttextFieldButtonGrp -l \"Old Root\" -text \"\" -buttonLabel \"Browse...\" -adj 2 -en 1 -cw 1 80 -cw 3 60 -cl3 right left center oldRootField;\n\t\t\t\ttextFieldButtonGrp -e -bc (\"FTM_BrowseCmd \\\"path\\\" \" + $FTM_ExtraFunctionColumn + \"|oldRootField \\\"Choose old root\\\" 4\") ($FTM_ExtraFunctionColumn + \"|oldRootField\");\n\t\t\t\tstring $tmp = `workspace -q -rd` + `workspace -q -fileRuleEntry \"sourceImages\"`;\n\t\t\t\t$tmp = `FTM_GetPath \"path\" $tmp`;\n\t\t\t\ttextFieldButtonGrp -l \"New Root\" -text $tmp -buttonLabel \"Browse...\" -adj 2 -en 1 -cw 1 80 -cw 3 60 -cl3 right left center newRootField;\n\t\t\t\ttextFieldButtonGrp -e -bc (\"FTM_BrowseCmd \\\"path\\\" \" + $FTM_ExtraFunctionColumn + \"|newRootField \\\"Choose new root\\\" 4\") ($FTM_ExtraFunctionColumn + \"|newRootField\");\n\t\t\t\tbutton -h 25 -l \"Substitute\" -c (\"FTM_Substitute \" + $FTM_ExtraFunctionColumn + \"|oldRootField \" + $FTM_ExtraFunctionColumn + \"|newRootField\");\n\t\t\t\t// BOT setup area\n\t\t\t\tseparator -style \"in\" -h 10;\n\t\t\t\ttext -fn \"boldLabelFont\" -al left -l \"Memory Efficiency (Maya 'file' nodes only)\";\n\t\t\t\t//text -fn \"boldLabelFont\" -al left -l \"BOT Setup (Maya sw renderer only)\";\n\t\t\t\ttext -al left -l \"\\\"BOT\\\" Setup (Maya sw renderer only)\";\n\t\t\t\trowLayout -nc 3 -adj 3\n\t\t\t\t\t\t-cw 1 170 -cw 2 2 -cal 3 center\n\t\t\t\t\t\t-cat 1 both 0 -cat 3 both 0\n\t\t\t\t\t\t-rat 1 bottom 0 -rat 2 bottom 0 -rat 3 bottom 0\n\t\t\t\t\t\tFTM_BOTRow;\n\t\t\t\t\tintFieldGrp -nf 1 -adj 2 -cw 1 50 -cat 1 left 0 -cat 2 both 5 -l \"Threshold\" -el \"\" -v1 1024 FTM_BOTResFieldGrp;\n\t\t\t\t\ttext -l \"\";\n\t\t\t\t\tbutton -h 25 -l \"Setup BOT\" -c (\"FTM_BOTSetup 1 \" + $FTM_ExtraFunctionColumn);\n\t\t\t\tsetParent ..;\n\t\t\t\tbutton -h 25 -l \"Unset BOT\" -c (\"FTM_BOTSetup 0 \" + $FTM_ExtraFunctionColumn);\n\t\t\t\ttext -al left -l \"\\\".map\\\" Setup (mentalray only)\";\n\t\t\t\trowLayout -nc 3 -adj 3\n\t\t\t\t\t\t-cw 1 170 -cw 2 2 -cal 3 center\n\t\t\t\t\t\t-cat 1 both 0 -cat 3 both 0\n\t\t\t\t\t\t-rat 1 bottom 0 -rat 2 bottom 0 -rat 3 bottom 0\n\t\t\t\t\t\tFTM_MAPRow;\n\t\t\t\t\tintFieldGrp -nf 1 -adj 2 -cw 1 50 -cat 1 left 0 -cat 2 both 5 -l \"Threshold\" -el \"\" -v1 1024 FTM_MAPResFieldGrp;\n\t\t\t\t\ttext -l \"\";\n\t\t\t\t\tbutton -h 25 -l \"Setup .map\" -c (\"FTM_MAPSetup 1 \" + $FTM_ExtraFunctionColumn);\n\t\t\t\tsetParent ..;\n\t\t\t\tbutton -h 25 -l \"Unset .map\" -c (\"FTM_MAPSetup 0 \" + $FTM_ExtraFunctionColumn);\n\t\t\t\t// Filter setup area\n\t\t\t\tseparator -style \"in\" -h 10;\n\t\t\t\ttext -fn \"boldLabelFont\" -al left -l \"Filter setup (Maya 'file'/'psdFileTex' nodes only)\";\n\t\t\t\trowLayout -nc 2 -cw 1 120 -cat 2 left 30 -adj 2 -cal 2 center -rat 1 bottom 0 FTM_FilterTypeRow;\n\t\t\t\t\toptionMenu -l \"Filter Type\" FTM_FilterTypeMenu;\n\t\t\t\t\t\t\tmenuItem -label \"Off\";\n\t\t\t\t\t\t\tmenuItem -label \"Mipmap\";\n\t\t\t\t\t\t\tmenuItem -label \"Box\";\n\t\t\t\t\t\t\tmenuItem -label \"Quadratic\";\n\t\t\t\t\t\t\tmenuItem -label \"Quartic\";\n\t\t\t\t\t\t\tmenuItem -label \"Gaussian\";\n\t\t\t\t\toptionMenu -e -v \"Mipmap\" ($FTM_ExtraFunctionColumn + \"|FTM_FilterTypeRow|FTM_FilterTypeMenu\");\n\t\t\t\t\tbutton -h 25 -l \"Set Filter Type\" -c (\"FTM_FilterSetup \" + $FTM_ExtraFunctionColumn);\n\t\t\t\tsetParent ..;\n\t\t\t\t// Format conversion area\n\t\t\t\tseparator -style \"in\" -h 10;\n\t\t\t\ttext -fn \"boldLabelFont\" -al left -l \"Texture file format conversion\";\n\t\t\t\trowLayout -nc 3\t-cw 1 80 -cw 3 80 -cat 1 left 0 -cat 2 left 10 -cat 3 left 10 -adj 2 -cal 2 center FTM_FCRow;\n\t\t\t\t\toptionMenu -l \"From\" FTM_FCSourceMenu;\n\t\t\t\t\t\tmenuItem -label \"\\*\";\n\t\t\t\t\t\tglobal string $FTM_FCAllFormats[];\n\t\t\t\t\t\tfor ($i=0;$i<size($FTM_FCAllFormats);$i++)\n\t\t\t\t\t\t\tmenuItem -label $FTM_FCAllFormats[$i];\n\t\t\t\t\tbutton -h 25 -l \"Select Matches\" -c (\"select -r `FTM_FCGetMatches \\\"\" + $FTM_ExtraFunctionColumn + \"|FTM_FCRow|FTM_FCSourceMenu\\\"`;\");\n\t\t\t\t\toptionMenu -l \"To\" FTM_FCTargetMenu;\n\t\t\t\t\t\tfor ($i=0;$i<size($FTM_FCAllFormats);$i++)\n\t\t\t\t\t\t\tmenuItem -label $FTM_FCAllFormats[$i];\n\t\t\t\tsetParent ..;\n\t\t\t\tcheckBox -l \"Handle sequence textures.\" -al \"left\" -v 0 FTM_SeqCheck;\n\t\t\t\tcheckBox -l \"Update path info.\" -al \"left\" -v 1 FTM_UpdateCheck;\n\t\t\t\tcheckBox -l \"Remove original textures. Use with caution!\" -al \"left\" -v 0 -en 1 FTM_RemoveCheck;\n\t\t\t\tcheckBox -e -onc (\"checkBox -e -en 1 \" + $FTM_ExtraFunctionColumn + \"|FTM_RemoveCheck\")\n\t\t\t\t\t\t\t-ofc (\"checkBox -e -en 0 \" + $FTM_ExtraFunctionColumn + \"|FTM_RemoveCheck\")\n\t\t\t\t\t\t\t($FTM_ExtraFunctionColumn + \"|FTM_UpdateCheck\");\n\t\t\t\tbutton -l \"Convert\" -h 25 -c (\"FTM_FCGatherInfo \" + $FTM_ExtraFunctionColumn);\n\t\tsetParent $FTM_Tabs;\n//Help tab\n\t\t\tstring $FTM_HelpForm = `formLayout`;\n//Description area\n\t\t\t\tscrollField -ww true -editable false FTM_HelpField;\n//About FileTextureManager\n\t\t\tsetParent $FTM_HelpForm;\n\t\t\t\tglobal int $FTM_NEW_MAYA;\n\t\t\t\tstring $FTM_AboutFrame;\n\t\t\t\tif ($FTM_NEW_MAYA) $FTM_AboutFrame = `frameLayout -l \"About FileTextureManager\" -fn boldLabelFont -cll 0 -bv true  -li 5`;\n\t\t\t\telse $FTM_AboutFrame = `frameLayout -l \"About FileTextureManager\" -la top -fn boldLabelFont -cll 0 -bv true  -li 5`;\n\t\t\t\tstring $FTM_AboutForm = `formLayout`;\n\t\t\t\t\tstring $FTM_AboutTextLeft = `text -l \"Script Name :\\nUpdated :\\nAuthor :\\nContact :\\n\\nAll  Rights  Reserved.\" -al left`;\n\t\t\t\t\tstring $FTM_AboutTextRight = `text -l \"FileTextureManager.mel\\nMay, 2011\\nCrow Yeh ( YE Feng )\\nCrow.Yeh@gmail.com\" -al left`;\n\t\t\t\tformLayout -e\n\t\t\t\t\t-af $FTM_AboutTextLeft left 10\n\t\t\t\t\t-af $FTM_AboutTextLeft top 5\n\t\t\t\t\t-an $FTM_AboutTextLeft right\n\t\t\t\t\t-af $FTM_AboutTextLeft bottom 5\n\t\t\t\t\t-ac $FTM_AboutTextRight left 10 $FTM_AboutTextLeft\n\t\t\t\t\t-af $FTM_AboutTextRight top 5\n\t\t\t\t\t-an $FTM_AboutTextRight right\n\t\t\t\t\t-an $FTM_AboutTextRight bottom\n\t\t\t\t\t$FTM_AboutForm;\n\t\t\tformLayout -e\n\t\t\t\t-ac FTM_HelpField bottom 5 $FTM_AboutFrame\n\t\t\t\t-af FTM_HelpField top 5\n\t\t\t\t-af FTM_HelpField left 0\n\t\t\t\t-af FTM_HelpField right 0\n\t\t\t\t-an $FTM_AboutFrame top\n\t\t\t\t-af $FTM_AboutFrame left 0\n\t\t\t\t-af $FTM_AboutFrame right 0\n\t\t\t\t-af $FTM_AboutFrame bottom 0\n\t\t\t\t$FTM_HelpForm;\n//Function form.\n\tsetParent $FTM_MainForm;\n\t\tstring $FTM_FunctionForm = `formLayout -h 30 -numberOfDivisions 100`;\n\t\t\tstring $FTM_CopyButton = `button -l \"复制\"\n\t\t\t\t\t\t\t-c (\"FTM_Function \\\"Copy\\\" \" + $FTM_OptionColumn)`;\n\t\t\tstring $FTM_MoveButton = `button -l \"剪切\"\n\t\t\t\t\t\t\t-c (\"FTM_Function \\\"Move\\\" \" + $FTM_OptionColumn)`;\n\t\t\tstring $FTM_SetButton = `button -l \"指定\"\n\t\t\t\t\t\t\t-c (\"FTM_Function \\\"Set\\\" \" + $FTM_OptionColumn)`;\n\t\t\tstring $FTM_ResetButton = `button -l \"重置FTM\" -c (\"FTM_ResetUI \"+$FTM_OptionColumn+\" \"+$FTM_AnalysisColumn+\" \"+$FTM_ExtraFunctionColumn+\" \"+$FTM_Tabs+\" \"+$FTM_CopyButton+\" \"+$FTM_MoveButton+\" \"+$FTM_SetButton)`;\n\t\t\tstring $FTM_CloseButton = `button -l \"退出\"\n\t\t\t\t\t\t\t-c (\"deleteUI FTM_MainWindow; select -cl;global string $FTM_MayaWorkSpace; workspace -dir $FTM_MayaWorkSpace;\")`;\n\t\tformLayout -e\n\t\t\t-ap $FTM_CopyButton right 1 20\n\t\t\t-af $FTM_CopyButton top 0\n\t\t\t-af $FTM_CopyButton left 0\n\t\t\t-af $FTM_CopyButton bottom 0\n\t\t\t-ap $FTM_MoveButton left 1 20\n\t\t\t-ap $FTM_MoveButton right 1 40\n\t\t\t-af $FTM_MoveButton top 0\n\t\t\t-af $FTM_MoveButton bottom 0\n\t\t\t-ap $FTM_SetButton left 1 40\n\t\t\t-ap $FTM_SetButton right 1 60\n\t\t\t-af $FTM_SetButton top 0\n\t\t\t-af $FTM_SetButton bottom 0\n\t\t\t-af $FTM_ResetButton top 0\n\t\t\t-af $FTM_ResetButton bottom 0\n\t\t\t-ap $FTM_ResetButton left 1 60\n\t\t\t-ap $FTM_ResetButton right 1 80\n\t\t\t-ap $FTM_CloseButton left 1 80\n\t\t\t-af $FTM_CloseButton top 0\n\t\t\t-af $FTM_CloseButton right 0\n\t\t\t-af $FTM_CloseButton bottom 0\n\t\t\t$FTM_FunctionForm;\n\tformLayout -e\n\t\t-af $FTM_Tabs top 0\n\t\t-af $FTM_Tabs left 0\n\t\t-af $FTM_Tabs right 0\n\t\t-ac $FTM_Tabs bottom 3 $FTM_FunctionForm\n\t\t-af $FTM_FunctionForm left 0\n\t\t-af $FTM_FunctionForm right 0\n\t\t-af $FTM_FunctionForm bottom 0\n\t\t-an $FTM_FunctionForm top\n\t\t$FTM_MainForm;\n\nFTM_EditUIControl $FTM_OptionColumn $FTM_HelpForm;\n\n\nstring $tabCC = \"button -e -en 0 \" + $FTM_CopyButton + \";\";\n$tabCC += \"button -e -en 0 \" + $FTM_MoveButton + \";\";\n$tabCC += \"button -e -en 0 \" + $FTM_SetButton + \";\";\n$tabCC += \"if (`tabLayout -q -sti \" + $FTM_Tabs + \"` == 1) {\";\n$tabCC += \"button -e -en 1 \" + $FTM_CopyButton + \";\";\n$tabCC += \"button -e -en 1 \" + $FTM_MoveButton + \";\";\n$tabCC += \"button -e -en 1 \" + $FTM_SetButton + \";\";\n$tabCC += \"}\";\n\ntabLayout -e -tl $FTM_OptionForm \"BasicFunctions\" -tl $FTM_ExtraFunctionScroll \"ExtraFunctions\" -tl $FTM_HelpForm \"Help\" -psc $tabCC $FTM_Tabs;\nshowWindow FTM_MainWindow;\n//Make sure other windows will be displayed in proper size.\nwindowPref -enableAll true;\n}\n\nFileTextureManager;\n/////////////////\n// SCRIPT Ends //\n/////////////////" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "帮助" ( "//帮助\n\nglobal proc m341_helpClose()\n{\n  global string $m341_close_HelpWindow;\n\n  if (`window -exists $m341_close_HelpWindow`)\n  {\n    global string $m341_close_HelpWindow;\n    deleteUI $m341_close_HelpWindow;\n  }\n  \n  $m341_close_HelpWindow = `window -title \"三岁豆Er_贴图路径编辑工具说明\" -leftEdge 900 -topEdge 115 -toolbox true -sizeable true -resizeToFitChildren false -width 350 -height 100`;\n    \n  paneLayout -configuration \"horizontal2\";\n  scrollField -text \"该工具可指定贴图路径，将现有贴图拷贝/剪切到指定路径，显示丢失贴图等功能\\nBy - 三岁豆\"\n  -wordWrap true\n  -enableBackground true\n  -backgroundColor 0.23 0.23 0.23;\n  \n  showWindow $m341_close_HelpWindow;\n}\nm341_helpClose();" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "FilePathEditor" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "FilePathEditor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "fileOpen.png" 
        -image1 "fileOpen.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FilePathEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 